    mu.x mu.y descape240 rghasp240    rghsq elksum240        elksq slope240
min    0    0      0.000     0.034 0.001156     0.048 2.000000e-03    0.000
max    0    0   5714.263     1.917 3.674889 31188.000 9.726913e+08   60.766
     slopesq forest240 elev240 edgeden240 road240
min    0.000         0    1063      0.000       0
max 3692.507        64    3886      0.018     598
    mu.x mu.y descape240 rghasp240    rghsq elksum240        elksq slope240
min    0    0      0.000     0.034 0.001156     0.048 2.000000e-03    0.000
max    0    0   5714.263     1.917 3.674889 31188.000 9.726913e+08   60.766
     slopesq forest240 elev240 edgeden240 road240
min    0.000         0    1063      0.000       0
max 3692.507        64    3886      0.018     598
                x       y  d2et slope elevm
    [1,] 604099.9 5152249     0    33  1479
    [2,] 604124.9 5152249     0    36  1476
    [3,] 604149.9 5152249     0    37  1474
    [4,] 604174.9 5152249     0    36  1479
    [5,] 604199.9 5152249     0    35  1483
    [6,] 604224.9 5152249     0    35  1481
    [7,] 604249.9 5152249     0    35  1478
    [8,] 604274.9 5152249     0    36  1472
    [9,] 604299.9 5152249     0    40  1462
   [10,] 604324.9 5152249     0    41  1444
   [11,] 604349.9 5152249     0    38  1428
   [12,] 604374.9 5152249     0    38  1424
   [13,] 604399.9 5152249    10    36  1422
   [14,] 604424.9 5152249    14    34  1417
   [15,] 604449.9 5152249     0    32  1409
   [16,] 604474.9 5152249    14    30  1399
   [17,] 604499.9 5152249    22    28  1389
   [18,] 604524.9 5152249    42    28  1380
   [19,] 604549.9 5152249    58    31  1367
   [20,] 604574.9 5152249    40    31  1353
   [21,] 604599.9 5152249    20    32  1340
   [22,] 604624.9 5152249    10    33  1323
   [23,] 604649.9 5152249    10    34  1311
   [24,] 604674.9 5152249     0    36  1302
   [25,] 604699.9 5152249    10    35  1296
   [26,] 604724.9 5152249    10    34  1290
   [27,] 604749.9 5152249     0    35  1280
   [28,] 604774.9 5152249     0    35  1267
   [29,] 604799.9 5152249    14    32  1254
   [30,] 604824.9 5152249    28    29  1243
   [31,] 604849.9 5152249    45    28  1233
   [32,] 604874.9 5152249    73    27  1221
   [33,] 604899.9 5152249    92    24  1211
   [34,] 604924.9 5152249    82    26  1202
   [35,] 604949.9 5152249    63    29  1191
   [36,] 604974.9 5152249    36    29  1179
   [37,] 604999.9 5152249    22    32  1167
   [38,] 605024.9 5152249     0    35  1152
   [39,] 605049.9 5152249    10    33  1137
   [40,] 605074.9 5152249    40    30  1124
   [41,] 605099.9 5152249    28    30  1113
   [42,] 605124.9 5152249    20    32  1099
   [43,] 605149.9 5152249    28    30  1086
   [44,] 605174.9 5152249    50    30  1074
   [45,] 605199.9 5152249    36    30  1061
   [46,] 605224.9 5152249    10    32  1050
   [47,] 605249.9 5152249     0    34  1034
   [48,] 605274.9 5152249    30    33  1019
   [49,] 605299.9 5152249    20    33  1006
   [50,] 605324.9 5152249    10    31   991
   [51,] 605349.9 5152249    22    24   979
   [52,] 605374.9 5152249    51    18   972
   [53,] 605399.9 5152249    71    17   968
   [54,] 605424.9 5152249   100    16   965
   [55,] 605449.9 5152249   120    16   961
   [56,] 605474.9 5152249   150    16   957
   [57,] 605499.9 5152249   158    16   953
   [58,] 605524.9 5152249   143    17   948
   [59,] 605549.9 5152249   136    17   944
   [60,] 605574.9 5152249   120    16   939
   [61,] 605599.9 5152249   106    16   935
   [62,] 605624.9 5152249    86    16   931
   [63,] 605649.9 5152249    76    15   927
   [64,] 605674.9 5152249    58    16   924
   [65,] 605699.9 5152249    50    20   919
   [66,] 605724.9 5152249    28    25   913
   [67,] 605749.9 5152249    14    31   904
   [68,] 605774.9 5152249     0    33   891
   [69,] 605799.9 5152249    20    30   879
   [70,] 605824.9 5152249    32    28   868
   [71,] 605849.9 5152249    14    33   857
   [72,] 605874.9 5152249     0    40   841
   [73,] 605899.9 5152249     0    41   817
   [74,] 605924.9 5152249    10    24   797
   [75,] 605949.9 5152249    22    12   793
   [76,] 605974.9 5152249    28    24   801
   [77,] 605999.9 5152249    10    33   815
   [78,] 606024.9 5152249    10    37   834
   [79,] 606049.9 5152249    10    30   853
   [80,] 606074.9 5152249    32    14   861
   [81,] 606099.9 5152249    50     5   863
   [82,] 606124.9 5152249    72     8   864
   [83,] 606149.9 5152249    89    17   869
   [84,] 606174.9 5152249    85    22   877
   [85,] 606199.9 5152249    71    20   887
   [86,] 606224.9 5152249    54    15   893
   [87,] 606249.9 5152249    45    15   897
   [88,] 606274.9 5152249    41    22   901
   [89,] 606299.9 5152249    28    30   911
   [90,] 606324.9 5152249    10    34   923
   [91,] 606349.9 5152249     0    36   938
   [92,] 606374.9 5152249     0    36   953
   [93,] 606399.9 5152249    10    33   969
   [94,] 606424.9 5152249    30    31   981
   [95,] 606449.9 5152249    36    30   993
   [96,] 606474.9 5152249    50    30  1004
   [97,] 606499.9 5152249    64    30  1017
   [98,] 606524.9 5152249    86    26  1027
   [99,] 606549.9 5152249   103    22  1034
  [100,] 606574.9 5152249   130    19  1039
  [101,] 606599.9 5152249   148    16  1042
  [102,] 606624.9 5152249   149    16  1043
  [103,] 606649.9 5152249   134    18  1042
  [104,] 606674.9 5152249   108    20  1039
  [105,] 606699.9 5152249    92    22  1035
  [106,] 606724.9 5152249    67    23  1028
  [107,] 606749.9 5152249    50    23  1020
  [108,] 606774.9 5152249    28    23  1010
  [109,] 606799.9 5152249    14    27  1000
  [110,] 606824.9 5152249     0    34  1005
  [111,] 606849.9 5152249     0    36  1007
  [112,] 606874.9 5152249     0    37  1002
  [113,] 606899.9 5152249     0    38   992
  [114,] 606924.9 5152249     0    38   983
  [115,] 606949.9 5152249     0    39   973
  [116,] 606974.9 5152249     0    42   961
  [117,] 606999.9 5152249     0    44   946
  [118,] 607024.9 5152249     0    42   929
  [119,] 607049.9 5152249     0    40   919
  [120,] 607074.9 5152249     0    39   903
  [121,] 607099.9 5152249     0    39   891
  [122,] 607124.9 5152249     0    40   876
  [123,] 607149.9 5152249    10    40   864
  [124,] 607174.9 5152249     0    42   853
  [125,] 607199.9 5152249     0    42   836
  [126,] 607224.9 5152249     0    41   822
  [127,] 607249.9 5152249     0    38   807
  [128,] 607274.9 5152249    14    30   791
  [129,] 607299.9 5152249    28    25   785
  [130,] 607324.9 5152249    10    30   776
  [131,] 607349.9 5152249    10    36   762
  [132,] 607374.9 5152249     0    36   748
  [133,] 607399.9 5152249    10    32   733
  [134,] 607424.9 5152249    28    29   723
  [135,] 607449.9 5152249    20    30   710
  [136,] 607474.9 5152249    28    28   696
  [137,] 607499.9 5152249    45    16   683
  [138,] 607524.9 5152249    73     4   681
  [139,] 607549.9 5152249    92     5   682
  [140,] 607574.9 5152249   114    10   686
  [141,] 607599.9 5152249   130    10   691
  [142,] 607624.9 5152249   157     8   694
  [143,] 607649.9 5152249   168     7   698
  [144,] 607674.9 5152249   179     8   701
  [145,] 607699.9 5152249   170     8   705
  [146,] 607724.9 5152249   149     7   708
  [147,] 607749.9 5152249   136     6   710
  [148,] 607774.9 5152249   121     7   712
  [149,] 607799.9 5152249   114     8   715
  [150,] 607824.9 5152249   110    10   717
  [151,] 607849.9 5152249   108    12   721
  [152,] 607874.9 5152249   100    12   724
  [153,] 607899.9 5152249    95    12   725
  [154,] 607924.9 5152249    81    12   724
  [155,] 607949.9 5152249    64    12   723
  [156,] 607974.9 5152249    42    15   725
  [157,] 607999.9 5152249    28    18   728
  [158,] 608024.9 5152249    20    19   730
  [159,] 608049.9 5152249    20    14   732
  [160,] 608074.9 5152249    20    15   738
  [161,] 608099.9 5152249    10    24   743
  [162,] 608124.9 5152249    10    30   751
  [163,] 608149.9 5152249    10    31   760
  [164,] 608174.9 5152249    14    31   764
  [165,] 608199.9 5152249    10    28   764
  [166,] 608224.9 5152249    14    19   765
  [167,] 608249.9 5152249    20     4   764
  [168,] 608274.9 5152249    30    16   769
  [169,] 608299.9 5152249    10    32   782
  [170,] 608324.9 5152249     0    38   803
  [171,] 608349.9 5152249     0    36   818
  [172,] 608374.9 5152249    20    33   831
  [173,] 608399.9 5152249    14    33   842
  [174,] 608424.9 5152249     0    35   853
  [175,] 608449.9 5152249     0    34   860
  [176,] 608474.9 5152249     0    34   866
  [177,] 608499.9 5152249     0    39   893
  [178,] 608524.9 5152249     0    37   911
  [179,] 608549.9 5152249    14    33   924
  [180,] 608574.9 5152249    14    32   934
  [181,] 608599.9 5152249     0    34   939
  [182,] 608624.9 5152249     0    32   943
  [183,] 608649.9 5152249    10    31   951
  [184,] 608674.9 5152249     0    34   972
  [185,] 608699.9 5152249    10    31   989
  [186,] 608724.9 5152249    32    29  1000
  [187,] 608749.9 5152249    45    29  1010
  [188,] 608774.9 5152249    28    32  1019
  [189,] 608799.9 5152249    20    33  1030
  [190,] 608824.9 5152249    36    33  1040
  [191,] 608849.9 5152249    51    32  1050
  [192,] 608874.9 5152249    50    30  1060
  [193,] 608899.9 5152249    50    29  1067
  [194,] 608924.9 5152249    41    31  1075
  [195,] 608949.9 5152249    36    33  1085
  [196,] 608974.9 5152249    20    33  1095
  [197,] 608999.9 5152249    14    34  1104
  [198,] 604099.9 5152224    10    31  1466
  [199,] 604124.9 5152224     0    34  1457
  [200,] 604149.9 5152224     0    36  1454
  [201,] 604174.9 5152224     0    37  1462
  [202,] 604199.9 5152224     0    34  1464
  [203,] 604224.9 5152224    10    34  1464
  [204,] 604249.9 5152224    20    35  1461
  [205,] 604274.9 5152224     0    39  1456
  [206,] 604299.9 5152224     0    42  1444
  [207,] 604324.9 5152224     0    42  1429
  [208,] 604349.9 5152224     0    38  1413
  [209,] 604374.9 5152224     0    35  1404
  [210,] 604399.9 5152224     0    34  1404
  [211,] 604424.9 5152224    10    32  1401
  [212,] 604449.9 5152224    14    30  1395
  [213,] 604474.9 5152224    28    28  1389
  [214,] 604499.9 5152224    41    28  1381
  [215,] 604524.9 5152224    57    30  1371
  [216,] 604549.9 5152224    70    31  1359
  [217,] 604574.9 5152224    40    30  1346
  [218,] 604599.9 5152224    20    31  1334
  [219,] 604624.9 5152224     0    34  1318
  [220,] 604649.9 5152224    14    36  1302
  [221,] 604674.9 5152224     0    35  1283
  [222,] 604699.9 5152224     0    34  1278
  [223,] 604724.9 5152224     0    36  1273
  [224,] 604749.9 5152224     0    35  1263
  [225,] 604774.9 5152224    14    32  1254
  [226,] 604799.9 5152224    28    27  1245
  [227,] 604824.9 5152224    45    26  1237
  [228,] 604849.9 5152224    57    27  1226
  [229,] 604874.9 5152224    81    26  1215
  [230,] 604899.9 5152224    98    26  1206
  [231,] 604924.9 5152224    76    29  1195
  [232,] 604949.9 5152224    58    30  1182
  [233,] 604974.9 5152224    30    31  1171
  [234,] 604999.9 5152224    10    35  1159
  [235,] 605024.9 5152224     0    37  1142
  [236,] 605049.9 5152224    10    33  1127
  [237,] 605074.9 5152224    36    30  1116
  [238,] 605099.9 5152224    20    33  1105
  [239,] 605124.9 5152224     0    34  1090
  [240,] 605149.9 5152224    20    32  1077
  [241,] 605174.9 5152224    41    30  1065
  [242,] 605199.9 5152224    22    31  1054
  [243,] 605224.9 5152224     0    34  1041
  [244,] 605249.9 5152224     0    36  1025
  [245,] 605274.9 5152224    14    34  1011
  [246,] 605299.9 5152224    10    34   997
  [247,] 605324.9 5152224    22    30   983
  [248,] 605349.9 5152224    36    22   973
  [249,] 605374.9 5152224    58    17   967
  [250,] 605399.9 5152224    76    16   962
  [251,] 605424.9 5152224   104    16   958
  [252,] 605449.9 5152224   124    17   955
  [253,] 605474.9 5152224   153    17   951
  [254,] 605499.9 5152224   142    18   947
  [255,] 605524.9 5152224   125    18   942
  [256,] 605549.9 5152224   117    17   937
  [257,] 605574.9 5152224   106    16   934
  [258,] 605599.9 5152224    92    16   930
  [259,] 605624.9 5152224    71    17   925
  [260,] 605649.9 5152224    58    18   921
  [261,] 605674.9 5152224    42    21   917
  [262,] 605699.9 5152224    32    26   911
  [263,] 605724.9 5152224    14    32   903
  [264,] 605749.9 5152224     0    35   891
  [265,] 605774.9 5152224    10    34   879
  [266,] 605799.9 5152224    28    30   869
  [267,] 605824.9 5152224    22    31   861
  [268,] 605849.9 5152224    10    38   848
  [269,] 605874.9 5152224     0    40   829
  [270,] 605899.9 5152224     0    31   810
  [271,] 605924.9 5152224    20    11   799
  [272,] 605949.9 5152224    36    21   804
  [273,] 605974.9 5152224    30    23   807
  [274,] 605999.9 5152224    10    27   816
  [275,] 606024.9 5152224    10    35   834
  [276,] 606049.9 5152224    10    28   853
  [277,] 606074.9 5152224    40    14   859
  [278,] 606099.9 5152224    58    11   864
  [279,] 606124.9 5152224    85    16   869
  [280,] 606149.9 5152224    98    21   876
  [281,] 606174.9 5152224    72    21   884
  [282,] 606199.9 5152224    57    17   891
  [283,] 606224.9 5152224    36    16   896
  [284,] 606249.9 5152224    28    22   901
  [285,] 606274.9 5152224    22    29   910
  [286,] 606299.9 5152224    14    34   921
  [287,] 606324.9 5152224     0    36   935
  [288,] 606349.9 5152224     0    35   950
  [289,] 606374.9 5152224     0    34   963
  [290,] 606399.9 5152224    14    32   977
  [291,] 606424.9 5152224    41    31   988
  [292,] 606449.9 5152224    54    31  1001
  [293,] 606474.9 5152224    67    31  1014
  [294,] 606499.9 5152224    78    29  1026
  [295,] 606524.9 5152224    99    24  1036
  [296,] 606549.9 5152224   114    21  1042
  [297,] 606574.9 5152224   139    18  1047
  [298,] 606599.9 5152224   157    16  1049
  [299,] 606624.9 5152224   136    15  1050
  [300,] 606649.9 5152224   120    15  1049
  [301,] 606674.9 5152224    98    16  1046
  [302,] 606699.9 5152224    81    18  1042
  [303,] 606724.9 5152224    57    22  1035
  [304,] 606749.9 5152224    41    24  1025
  [305,] 606774.9 5152224    14    23  1016
  [306,] 606799.9 5152224     0    29  1019
  [307,] 606824.9 5152224    10    30  1021
  [308,] 606849.9 5152224    20    29  1021
  [309,] 606874.9 5152224    20    32  1015
  [310,] 606899.9 5152224    10    35  1008
  [311,] 606924.9 5152224     0    36   999
  [312,] 606949.9 5152224     0    38   989
  [313,] 606974.9 5152224     0    41   980
  [314,] 606999.9 5152224     0    44   964
  [315,] 607024.9 5152224     0    44   949
  [316,] 607049.9 5152224     0    42   932
  [317,] 607074.9 5152224     0    40   920
  [318,] 607099.9 5152224     0    39   906
  [319,] 607124.9 5152224     0    39   893
  [320,] 607149.9 5152224     0    37   879
  [321,] 607174.9 5152224    10    38   867
  [322,] 607199.9 5152224     0    41   856
  [323,] 607224.9 5152224     0    43   838
  [324,] 607249.9 5152224     0    42   822
  [325,] 607274.9 5152224     0    40   806
  [326,] 607299.9 5152224    14    32   790
  [327,] 607324.9 5152224    14    28   785
  [328,] 607349.9 5152224     0    33   775
  [329,] 607374.9 5152224     0    38   760
  [330,] 607399.9 5152224     0    38   745
  [331,] 607424.9 5152224    14    34   727
  [332,] 607449.9 5152224     0    31   715
  [333,] 607474.9 5152224    20    27   696
  [334,] 607499.9 5152224    40    21   689
  [335,] 607524.9 5152224    64    14   682
  [336,] 607549.9 5152224    78     5   682
  [337,] 607574.9 5152224   103     9   685
  [338,] 607599.9 5152224   121    10   690
  [339,] 607624.9 5152224   143     8   695
  [340,] 607649.9 5152224   149     6   697
  [341,] 607674.9 5152224   161     8   700
  [342,] 607699.9 5152224   172     8   704
  [343,] 607724.9 5152224   164     7   706
  [344,] 607749.9 5152224   153     7   709
  [345,] 607774.9 5152224   139     6   711
  [346,] 607799.9 5152224   133     7   712
  [347,] 607824.9 5152224   130     9   715
  [348,] 607849.9 5152224   126    11   717
  [349,] 607874.9 5152224   120    11   720
  [350,] 607899.9 5152224   114    10   721
  [351,] 607924.9 5152224    92     9   719
  [352,] 607949.9 5152224    78     8   719
  [353,] 607974.9 5152224    57     8   720
  [354,] 607999.9 5152224    42    10   723
  [355,] 608024.9 5152224    22    17   727
  [356,] 608049.9 5152224    10    31   735
  [357,] 608074.9 5152224     0    40   751
  [358,] 608099.9 5152224     0    44   763
  [359,] 608124.9 5152224     0    44   773
  [360,] 608149.9 5152224     0    41   780
  [361,] 608174.9 5152224     0    39   785
  [362,] 608199.9 5152224     0    38   787
  [363,] 608224.9 5152224     0    37   783
  [364,] 608249.9 5152224     0    32   776
  [365,] 608274.9 5152224    14    18   769
  [366,] 608299.9 5152224    14    21   778
  [367,] 608324.9 5152224     0    34   791
  [368,] 608349.9 5152224    10    35   809
  [369,] 608374.9 5152224    28    32   821
  [370,] 608399.9 5152224    22    32   831
  [371,] 608424.9 5152224    14    32   839
  [372,] 608449.9 5152224    14    31   847
  [373,] 608474.9 5152224     0    36   867
  [374,] 608499.9 5152224     0    38   884
  [375,] 608524.9 5152224     0    37   898
  [376,] 608549.9 5152224     0    35   912
  [377,] 608574.9 5152224     0    34   918
  [378,] 608599.9 5152224     0    31   920
  [379,] 608624.9 5152224    14    29   936
  [380,] 608649.9 5152224    10    30   951
  [381,] 608674.9 5152224    10    33   967
  [382,] 608699.9 5152224    22    31   980
  [383,] 608724.9 5152224    42    29   990
  [384,] 608749.9 5152224    58    29   999
  [385,] 608774.9 5152224    45    30  1007
  [386,] 608799.9 5152224    40    32  1018
  [387,] 608824.9 5152224    50    31  1029
  [388,] 608849.9 5152224    64    31  1038
  [389,] 608874.9 5152224    70    31  1048
  [390,] 608899.9 5152224    70    30  1056
  [391,] 608924.9 5152224    61    31  1063
  [392,] 608949.9 5152224    50    32  1072
  [393,] 608974.9 5152224    40    32  1081
  [394,] 608999.9 5152224    32    32  1090
  [395,] 604099.9 5152199    20    32  1459
  [396,] 604124.9 5152199    10    32  1443
  [397,] 604149.9 5152199    10    32  1436
  [398,] 604174.9 5152199     0    37  1443
  [399,] 604199.9 5152199     0    37  1449
  [400,] 604224.9 5152199    10    38  1449
  [401,] 604249.9 5152199     0    40  1444
  [402,] 604274.9 5152199     0    42  1435
  [403,] 604299.9 5152199     0    41  1424
  [404,] 604324.9 5152199     0    38  1411
  [405,] 604349.9 5152199     0    36  1400
  [406,] 604374.9 5152199    20    32  1388
  [407,] 604399.9 5152199    20    31  1388
  [408,] 604424.9 5152199    28    30  1387
  [409,] 604449.9 5152199    41    29  1383
  [410,] 604474.9 5152199    54    28  1377
  [411,] 604499.9 5152199    64    29  1370
  [412,] 604524.9 5152199    81    30  1360
  [413,] 604549.9 5152199    71    30  1349
  [414,] 604574.9 5152199    41    28  1338
  [415,] 604599.9 5152199    22    30  1328
  [416,] 604624.9 5152199     0    34  1313
  [417,] 604649.9 5152199    10    37  1296
  [418,] 604674.9 5152199    10    35  1276
  [419,] 604699.9 5152199    20    33  1263
  [420,] 604724.9 5152199     0    35  1256
  [421,] 604749.9 5152199     0    34  1249
  [422,] 604774.9 5152199    30    29  1242
  [423,] 604799.9 5152199    50    26  1236
  [424,] 604824.9 5152199    71    27  1229
  [425,] 604849.9 5152199    81    28  1218
  [426,] 604874.9 5152199    99    27  1208
  [427,] 604899.9 5152199   100    29  1199
  [428,] 604924.9 5152199    70    31  1186
  [429,] 604949.9 5152199    50    31  1174
  [430,] 604974.9 5152199    20    32  1162
  [431,] 604999.9 5152199     0    36  1148
  [432,] 605024.9 5152199     0    37  1130
  [433,] 605049.9 5152199    14    32  1117
  [434,] 605074.9 5152199    14    33  1107
  [435,] 605099.9 5152199     0    36  1094
  [436,] 605124.9 5152199    10    35  1078
  [437,] 605149.9 5152199    22    31  1067
  [438,] 605174.9 5152199    40    31  1056
  [439,] 605199.9 5152199    20    33  1045
  [440,] 605224.9 5152199     0    35  1030
  [441,] 605249.9 5152199     0    36  1015
  [442,] 605274.9 5152199     0    35  1000
  [443,] 605299.9 5152199    10    32   986
  [444,] 605324.9 5152199    32    26   974
  [445,] 605349.9 5152199    51    20   967
  [446,] 605374.9 5152199    78    17   962
  [447,] 605399.9 5152199    92    17   956
  [448,] 605424.9 5152199   117    16   952
  [449,] 605449.9 5152199   134    17   948
  [450,] 605474.9 5152199   135    18   944
  [451,] 605499.9 5152199   120    18   940
  [452,] 605524.9 5152199   100    18   935
  [453,] 605549.9 5152199    89    17   931
  [454,] 605574.9 5152199    81    17   928
  [455,] 605599.9 5152199    71    19   923
  [456,] 605624.9 5152199    50    20   919
  [457,] 605649.9 5152199    36    24   914
  [458,] 605674.9 5152199    20    29   908
  [459,] 605699.9 5152199    10    34   900
  [460,] 605724.9 5152199     0    38   889
  [461,] 605749.9 5152199     0    38   876
  [462,] 605774.9 5152199    10    34   865
  [463,] 605799.9 5152199    22    32   857
  [464,] 605824.9 5152199     0    36   849
  [465,] 605849.9 5152199     0    39   833
  [466,] 605874.9 5152199    10    30   815
  [467,] 605899.9 5152199    20    11   805
  [468,] 605924.9 5152199    10    21   806
  [469,] 605949.9 5152199    22    29   814
  [470,] 605974.9 5152199    36    28   819
  [471,] 605999.9 5152199    22    26   822
  [472,] 606024.9 5152199     0    28   831
  [473,] 606049.9 5152199    10    26   850
  [474,] 606074.9 5152199    40    18   859
  [475,] 606099.9 5152199    60    17   866
  [476,] 606124.9 5152199    90    19   874
  [477,] 606149.9 5152199    85    20   882
  [478,] 606174.9 5152199    58    18   890
  [479,] 606199.9 5152199    41    16   895
  [480,] 606224.9 5152199    14    23   900
  [481,] 606249.9 5152199     0    30   910
  [482,] 606274.9 5152199    10    34   922
  [483,] 606299.9 5152199     0    34   935
  [484,] 606324.9 5152199    10    33   948
  [485,] 606349.9 5152199    20    31   959
  [486,] 606374.9 5152199    30    32   971
  [487,] 606399.9 5152199    36    32   985
  [488,] 606424.9 5152199    57    32   998
  [489,] 606449.9 5152199    72    31  1011
  [490,] 606474.9 5152199    94    30  1022
  [491,] 606499.9 5152199   103    27  1035
  [492,] 606524.9 5152199   120    22  1043
  [493,] 606549.9 5152199   135    18  1049
  [494,] 606574.9 5152199   156    16  1054
  [495,] 606599.9 5152199   149    14  1056
  [496,] 606624.9 5152199   121    13  1056
  [497,] 606649.9 5152199   103    13  1054
  [498,] 606674.9 5152199    78    13  1051
  [499,] 606699.9 5152199    64    15  1047
  [500,] 606724.9 5152199    41    20  1041
  [501,] 606749.9 5152199    22    24  1032
  [502,] 606774.9 5152199    10    27  1028
  [503,] 606799.9 5152199    20    29  1032
  [504,] 606824.9 5152199    36    27  1034
  [505,] 606849.9 5152199    41    27  1033
  [506,] 606874.9 5152199    14    30  1030
  [507,] 606899.9 5152199    10    33  1023
  [508,] 606924.9 5152199    14    34  1014
  [509,] 606949.9 5152199    10    35  1006
  [510,] 606974.9 5152199     0    38   997
  [511,] 606999.9 5152199     0    42   984
  [512,] 607024.9 5152199     0    44   967
  [513,] 607049.9 5152199     0    43   951
  [514,] 607074.9 5152199     0    42   936
  [515,] 607099.9 5152199     0    41   920
  [516,] 607124.9 5152199     0    38   906
  [517,] 607149.9 5152199     0    36   893
  [518,] 607174.9 5152199    10    35   881
  [519,] 607199.9 5152199    10    37   870
  [520,] 607224.9 5152199     0    41   856
  [521,] 607249.9 5152199     0    43   839
  [522,] 607274.9 5152199     0    43   823
  [523,] 607299.9 5152199     0    40   806
  [524,] 607324.9 5152199    10    33   791
  [525,] 607349.9 5152199    14    30   786
  [526,] 607374.9 5152199     0    35   775
  [527,] 607399.9 5152199     0    42   758
  [528,] 607424.9 5152199     0    41   733
  [529,] 607449.9 5152199    10    35   716
  [530,] 607474.9 5152199    10    31   705
  [531,] 607499.9 5152199    22    29   700
  [532,] 607524.9 5152199    45    25   690
  [533,] 607549.9 5152199    63    16   685
  [534,] 607574.9 5152199    92     9   687
  [535,] 607599.9 5152199   110     7   690
  [536,] 607624.9 5152199   114     7   694
  [537,] 607649.9 5152199   121     7   697
  [538,] 607674.9 5152199   136     7   699
  [539,] 607699.9 5152199   149     8   701
  [540,] 607724.9 5152199   170     8   704
  [541,] 607749.9 5152199   179     8   707
  [542,] 607774.9 5152199   168     7   709
  [543,] 607799.9 5152199   163     7   710
  [544,] 607824.9 5152199   153     9   711
  [545,] 607849.9 5152199   136    11   713
  [546,] 607874.9 5152199   113    12   715
  [547,] 607899.9 5152199    99    10   715
  [548,] 607924.9 5152199    78     5   716
  [549,] 607949.9 5152199    64     5   717
  [550,] 607974.9 5152199    42    11   719
  [551,] 607999.9 5152199    28    21   725
  [552,] 608024.9 5152199     0    33   734
  [553,] 608049.9 5152199     0    44   752
  [554,] 608074.9 5152199     0    46   772
  [555,] 608099.9 5152199     0    43   788
  [556,] 608124.9 5152199     0    38   798
  [557,] 608149.9 5152199    10    34   802
  [558,] 608174.9 5152199    10    32   804
  [559,] 608199.9 5152199    10    32   805
  [560,] 608224.9 5152199    10    35   802
  [561,] 608249.9 5152199     0    37   797
  [562,] 608274.9 5152199    10    32   786
  [563,] 608299.9 5152199    22    11   778
  [564,] 608324.9 5152199    10    21   783
  [565,] 608349.9 5152199     0    32   797
  [566,] 608374.9 5152199    10    34   809
  [567,] 608399.9 5152199     0    33   816
  [568,] 608424.9 5152199    10    32   825
  [569,] 608449.9 5152199    10    32   844
  [570,] 608474.9 5152199     0    34   857
  [571,] 608499.9 5152199     0    36   872
  [572,] 608524.9 5152199     0    36   885
  [573,] 608549.9 5152199     0    34   896
  [574,] 608574.9 5152199    10    33   897
  [575,] 608599.9 5152199     0    36   918
  [576,] 608624.9 5152199    20    31   936
  [577,] 608649.9 5152199    32    29   947
  [578,] 608674.9 5152199    32    30   958
  [579,] 608699.9 5152199    42    30   969
  [580,] 608724.9 5152199    64    30   980
  [581,] 608749.9 5152199    78    28   989
  [582,] 608774.9 5152199    73    29   997
  [583,] 608799.9 5152199    70    30  1007
  [584,] 608824.9 5152199    76    30  1017
  [585,] 608849.9 5152199    86    30  1026
  [586,] 608874.9 5152199   100    mu.x mu.y d2et slope  elevm
min    0    0    0     0 681.00
max    0    0  420    63  18.25
WARNING: unknown option '-i'

ARGUMENT '003SCF' __ignored__


R version 2.10.1 (2009-12-14)
Copyright (C) 2009 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Synoptic Model for Analyzing Animal Space Use
> # By: Jon Horne; jhorne@uidaho.edu
> 
> i <- 0
> cluster <- ""
> options <- commandArgs()
> for(option in options) {
+            i <- i + 1
+            if(option == "-i"){
+            cluster <- options[i + 1]
+            }
+ }
> 
> # read in files:
> #(1) set working directory with input files
> #workdir = choose.dir(caption="Select folder with input files")
> getwd()
[1] "/mnt/nfs/awells/SYN2"
> basedir = "/mnt/home/awells/SYN2"
> workdir = paste("/mnt/home/awells/SYN2/data/",cluster, sep="")
> setwd(workdir)
> 
> cluster
[1] "003SCF"
> #(2) choose file containing functions: GeneralFramework_SynopticModels.R
> genfile = paste(basedir,"/GeneralFrameWorkFitSynopticModels_11_AllExtents.r",sep="")
> source(file = genfile)
> 
> #(3) choose locations file:
> locationsfile = paste(cluster, "_all_locations.txt", sep="") 
>  
> origfilename = strsplit(locationsfile,"\\.")[[1]][1]
> Track = as.matrix(read.table(file= locationsfile,head=T,sep=''))
>  #separate text refering to availability file from track data
>  locAvailFile=Track[,ncol(Track)]
>  Track = apply(Track[,1:(ncol(Track)-1)],2,as.numeric)
> #(4) specify which variables will be used: use '1' to specify a variable that will be
> # used and '0' for variables that will not be used
> 
> ModelsList = list()
> ModelsList[1] = list(rep(0, ncol(Track)-3))  # No covariates==> null model of space use
> 
> #Modify these to do different models...  '1' means use the covariate '0' leave out
> ModelsList[2] = list(c(1, 1, 0))
> ModelsList[3] = list(c(1, 1, 1))
> ModelsList[4] = list(c(0,1,1))
> ModelsList[5] = list(c(1,0,1))
> 
> #============================================================================
> #For temporally changing habitat values, create a list of availability grids
> AvailFileNames = table(locAvailFile)
> AvailList=list()
> for (i in 1:length(AvailFileNames)){
+   #these two lines to test
+   filename = paste(workdir,"/",names(AvailFileNames)[i],sep="")
+   habmat = as.matrix(read.table(file=filename,head=T,sep=''))
+ # added by Polly to remove first column in avail files which is cougar ID
+ # Fuck you Polly!
+ #  habmat = apply(habmat[,2:(ncol(habmat))],2,as.numeric)
+   AvailList[i] = list(habmat)
+ }
> names(AvailList)=names(AvailFileNames)
> #====================================================================================
> #Standardize Covariates to range 0 to 1; this helps with likelihood calculations
> mins = matrix(NA,length(AvailList),ncol(AvailList[[1]]))
> maxs=mins
> #Enter absolute minimum and maximum values for each covariate from all of the input availability grids
> #The first 2 columns are for x and y coordinates and mins and maxs can be set to 0, these values will be ingored
> #minmaxfilename = paste(workdir,cluster,"_all_locations_CoVar_MinMax.txt",sep="")
> #minmaxfile = read.table(minmaxfilename, sep
> colmin = c(0,0,0,0,681)
> colmax = c(0,0,420,63,18.25)
> names(colmax) = c("mu.x", "mu.y", colnames(AvailList[[1]])[-c(1:2)])
> CoVarMinMax = matrix(0,2,ncol(AvailList[[1]]))
> CoVarMinMax[1,]=colmin
> CoVarMinMax[2,]=colmax
> colnames(CoVarMinMax)=names(colmax)
> rownames(CoVarMinMax)=c("min", "max")
> 
> #Write output file of minimum and maximum values for each input variable
> outputfile = paste(origfilename,"_CoVar_MinMax.txt", sep = "")
> data.frame(CoVarMinMax)
    mu.x mu.y d2et slope  elevm
min    0    0    0     0 681.00
max    0    0  420    63  18.25
> write.table (CoVarMinMax, file = outputfile)
> 
> #Standardize Covariates in Availability grids
> for (i in 1:length(AvailList)){
+  for (col in 3:ncol(AvailList[[1]])){
+   AvailList[[i]][,col]=(AvailList[[i]][,col]-colmin[col])/(colmax[col]-colmin[col])
+  } # end column loop
+ } # end list loop
> 
>  #Standardize Covariates in location data
>  for (col in 3:ncol(AvailList[[1]])){
+   Track[,col+1]=(Track[,col+1]-colmin[col])/(colmax[col]-colmin[col])
+  } # end column loop
> 
> #===================================================================================
> #===================================================================================
> # Loop through candidate models; Bivariate Normal null model
> 
> PrevBVNParamEsts = array(0,(ncol(AvailList[[1]])+3))
> names(PrevBVNParamEsts) = c("mu.x", "mu.y", "sd.x", "sd.y", "corr.x.y",colnames(AvailList[[1]])[-c(1:2)])
> 
> for (k in 1:length(ModelsList)){
+     #delete columns (i.e., variables) in Availability grids, and Track not used 
+       Nvariables = sum(ModelsList[[k]]) #number of variables in current model
+ 	CurrentAList=list()
+       CurrentTrack=Track[,1:3] 					#keep x, y and time
+ 	for (i in 1:length(AvailList)){
+ 	 CurrentAList[[i]]=AvailList[[i]][,1:2]			#keep x and y
+ 	} #end availability list loop
+       names(CurrentAList)=names(AvailFileNames)     	
+ 	cc=3
+ 	for (col in 3:ncol(AvailList[[1]])){
+ 	  if (ModelsList[[k]][col-2]==1){
+           CurrentTrack=cbind(CurrentTrack, Track[,col+1])
+           colnames(CurrentTrack)[cc+1]=colnames(AvailList[[i]])[col]
+ 	    for (i in 1:length(AvailList)){
+ 	       CurrentAList[[i]]=cbind(CurrentAList[[i]],AvailList[[i]][,col])
+              colnames(CurrentAList[[i]])[cc]=colnames(AvailList[[1]])[col]	
+ 	    } #end availability list loop  
+ 		cc = cc+1                  
+ 	  }# end if statement
+ 	} #end variable column loop
+     #-----------------------------------------------------------------------------------
+ ### Synoptic with bivariate normal
+ # Get initial parameter values
+ ThetaW = c(rep(0, ncol(CurrentTrack)-3))	#Initial RSF coeff. set to 0; no selection 
+ if (k==1){
+ mu = as.numeric(apply(Track[,1:2],2,mean))
+ sdx = sd(CurrentTrack[,1])
+ sdy = sd(CurrentTrack[,2])
+ corrXY = cor(CurrentTrack[,1],CurrentTrack[,2])
+ 
+ } else { #==> use estimated parameters of previous models (if they exist) for initial values
+  mu = SBVN.fit$parTable[1:2,1]
+  sdx = exp(SBVN.fit$parTable[3,1])
+  sdy = exp(SBVN.fit$parTable[4,1])
+  corrXY = (SBVN.fit$parTable[5,1])
+  names(ThetaW) = colnames(CurrentAList[[1]])[3:ncol(CurrentAList[[1]])]
+  for (i in 1:length(PrevBVNParamEsts)){
+   for (j in 1:length(ThetaW)){
+    if(names(PrevBVNParamEsts)[i]==names(ThetaW)[j]){
+     ThetaW[j]=PrevBVNParamEsts[i]
+    } #end if 
+   } #end ThetaW loop
+  } #end PrevBVNParamEsts loop
+ } #end if
+ 
+ lnsdx = log(sdx)
+ lnsdy = log(sdy)
+ 
+ paramSBVN = c(mu, lnsdx, lnsdy, corrXY, ThetaW)
+ paramSBVN = paramSBVN[1:(5+length(ThetaW))]
+ 
+ SBVN.fit = sbvnle(CurrentTrack,CurrentAList,locAvailFile, start.val=paramSBVN)
+ 
+ PrevBVNParamEsts[rownames(SBVN.fit$parTable)]=SBVN.fit$parTable[rownames(SBVN.fit$parTable),1]
+ 
+ #Transform back parameter estimates for sdx and sdy
+  UnTransSBVN.fit = SBVN.fit
+  UnTransSBVN.fit$parTable[3:4,1:4]=exp(SBVN.fit$parTable[3:4,1:4])
+  rownames(UnTransSBVN.fit$parTable)[3]="sdx"
+  rownames(UnTransSBVN.fit$parTable)[4]="sxy"
+ 
+ #Write output probability file to working directory
+ for (i in 1:length(CurrentAList)){
+ 	extentfile = names(AvailFileNames[i])
+ 	outputfile = paste("Prob_", origfilename,"_BVN_Model",k,"_", extentfile,sep = 	"")
+ 	write.table (UnTransSBVN.fit[[7]][[i]], file = outputfile, col.names = TRUE, 	row.names = F, sep = ",")
+ }
+ 
+ #Write output table to working directory
+ outputfile = paste("BVN_Model",k,"_Out.txt",sep = "")
+ tmp.wid = getOption("width")  # save current width
+ options(width=10000)
+ sink(outputfile)              # redirect output to file
+ print(UnTransSBVN.fit[1:6])    # print the object
+ sink()                        # cancel redirection
+ options(width=tmp.wid)        # restore linewidth
+ 
+ } #end loop through candidate models list
WARNING: unknown option '-i'

ARGUMENT '003SCF' __ignored__


R version 2.10.1 (2009-12-14)
Copyright (C) 2009 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Synoptic Model for Analyzing Animal Space Use
> # By: Jon Horne; jhorne@uidaho.edu
> 
> i <- 0
> cluster <- ""
> options <- commandArgs()
> for(option in options) {
+            i <- i + 1
+            if(option == "-i"){
+            cluster <- options[i + 1]
+            }
+ }
> 
> # read in files:
> #(1) set working directory with input files
> #workdir = choose.dir(caption="Select folder with input files")
> getwd()
[1] "/mnt/nfs/awells/SYN2"
> basedir = "/mnt/home/awells/SYN2"
> workdir = paste("/mnt/home/awells/SYN2/data/",cluster, sep="")
> setwd(workdir)
> 
> cluster
[1] "003SCF"
> #(2) choose file containing functions: GeneralFramework_SynopticModels.R
> genfile = paste(basedir,"/GeneralFrameWorkFitSynopticModels_11_AllExtents.r",sep="")
> source(file = genfile)
> 
> #(3) choose locations file:
> locationsfile = paste(cluster, "_all_locations.txt", sep="") 
>  
> origfilename = strsplit(locationsfile,"\\.")[[1]][1]
> Track = as.matrix(read.table(file= locationsfile,head=T,sep=''))
>  #separate text refering to availability file from track data
>  locAvailFile=Track[,ncol(Track)]
>  Track = apply(Track[,1:(ncol(Track)-1)],2,as.numeric)
> #(4) specify which variables will be used: use '1' to specify a variable that will be
> # used and '0' for variables that will not be used
> 
> ModelsList = list()
> ModelsList[1] = list(rep(0, ncol(Track)-3))  # No covariates==> null model of space use
> 
> #Modify these to do different models...  '1' means use the covariate '0' leave out
> ModelsList[2] = list(c(1, 1, 0))
> ModelsList[3] = list(c(1, 1, 1))
> ModelsList[4] = list(c(0,1,1))
> ModelsList[5] = list(c(1,0,1))
> 
> #============================================================================
> #For temporally changing habitat values, create a list of availability grids
> AvailFileNames = table(locAvailFile)
> AvailList=list()
> for (i in 1:length(AvailFileNames)){
+   #these two lines to test
+   filename = paste(workdir,"/",names(AvailFileNames)[i],sep="")
+   habmat = as.matrix(read.table(file=filename,head=T,sep=''))
+ # added by Polly to remove first column in avail files which is cougar ID
+ # Fuck you Polly!
+ #  habmat = apply(habmat[,2:(ncol(habmat))],2,as.numeric)
+   AvailList[i] = list(habmat)
+ }
> names(AvailList)=names(AvailFileNames)
> #====================================================================================
> #Standardize Covariates to range 0 to 1; this helps with likelihood calculations
> mins = matrix(NA,length(AvailList),ncol(AvailList[[1]]))
> maxs=mins
> #Enter absolute minimum and maximum values for each covariate from all of the input availability grids
> #The first 2 columns are for x and y coordinates and mins and maxs can be set to 0, these values will be ingored
> #minmaxfilename = paste(workdir,cluster,"_all_locations_CoVar_MinMax.txt",sep="")
> #minmaxfile = read.table(minmaxfilename, sep
> colmin = c(0,0,0,0,681)
> colmax = c(0,0,420,63,18.25)
> names(colmax) = c("mu.x", "mu.y", colnames(AvailList[[1]])[-c(1:2)])
> CoVarMinMax = matrix(0,2,ncol(AvailList[[1]]))
> CoVarMinMax[1,]=colmin
> CoVarMinMax[2,]=colmax
> colnames(CoVarMinMax)=names(colmax)
> rownames(CoVarMinMax)=c("min", "max")
> 
> #Write output file of minimum and maximum values for each input variable
> outputfile = paste(origfilename,"_CoVar_MinMax.txt", sep = "")
> data.frame(CoVarMinMax)
    mu.x mu.y d2et slope  elevm
min    0    0    0     0 681.00
max    0    0  420    63  18.25
> write.table (CoVarMinMax, file = outputfile)
> 
> #Standardize Covariates in Availability grids
> for (i in 1:length(AvailList)){
+  for (col in 3:ncol(AvailList[[1]])){
+   AvailList[[i]][,col]=(AvailList[[i]][,col]-colmin[col])/(colmax[col]-colmin[col])
+  } # end column loop
+ } # end list loop
> 
>  #Standardize Covariates in location data
>  for (col in 3:ncol(AvailList[[1]])){
+   Track[,col+1]=(Track[,col+1]-colmin[col])/(colmax[col]-colmin[col])
+  } # end column loop
> 
> #===================================================================================
> #===================================================================================
> # Loop through candidate models; Bivariate Normal null model
> 
> PrevBVNParamEsts = array(0,(ncol(AvailList[[1]])+3))
> names(PrevBVNParamEsts) = c("mu.x", "mu.y", "sd.x", "sd.y", "corr.x.y",colnames(AvailList[[1]])[-c(1:2)])
> 
> for (k in 1:length(ModelsList)){
+     #delete columns (i.e., variables) in Availability grids, and Track not used 
+       Nvariables = sum(ModelsList[[k]]) #number of variables in current model
+ 	CurrentAList=list()
+       CurrentTrack=Track[,1:3] 					#keep x, y and time
+ 	for (i in 1:length(AvailList)){
+ 	 CurrentAList[[i]]=AvailList[[i]][,1:2]			#keep x and y
+ 	} #end availability list loop
+       names(CurrentAList)=names(AvailFileNames)     	
+ 	cc=3
+ 	for (col in 3:ncol(AvailList[[1]])){
+ 	  if (ModelsList[[k]][col-2]==1){
+           CurrentTrack=cbind(CurrentTrack, Track[,col+1])
+           colnames(CurrentTrack)[cc+1]=colnames(AvailList[[i]])[col]
+ 	    for (i in 1:length(AvailList)){
+ 	       CurrentAList[[i]]=cbind(CurrentAList[[i]],AvailList[[i]][,col])
+              colnames(CurrentAList[[i]])[cc]=colnames(AvailList[[1]])[col]	
+ 	    } #end availability list loop  
+ 		cc = cc+1                  
+ 	  }# end if statement
+ 	} #end variable column loop
+     #-----------------------------------------------------------------------------------
+ ### Synoptic with bivariate normal
+ # Get initial parameter values
+ ThetaW = c(rep(0, ncol(CurrentTrack)-3))	#Initial RSF coeff. set to 0; no selection 
+ if (k==1){
+ mu = as.numeric(apply(Track[,1:2],2,mean))
+ sdx = sd(CurrentTrack[,1])
+ sdy = sd(CurrentTrack[,2])
+ corrXY = cor(CurrentTrack[,1],CurrentTrack[,2])
+ 
+ } else { #==> use estimated parameters of previous models (if they exist) for initial values
+  mu = SBVN.fit$parTable[1:2,1]
+  sdx = exp(SBVN.fit$parTable[3,1])
+  sdy = exp(SBVN.fit$parTable[4,1])
+  corrXY = (SBVN.fit$parTable[5,1])
+  names(ThetaW) = colnames(CurrentAList[[1]])[3:ncol(CurrentAList[[1]])]
+  for (i in 1:length(PrevBVNParamEsts)){
+   for (j in 1:length(ThetaW)){
+    if(names(PrevBVNParamEsts)[i]==names(ThetaW)[j]){
+     ThetaW[j]=PrevBVNParamEsts[i]
+    } #end if 
+   } #end ThetaW loop
+  } #end PrevBVNParamEsts loop
+ } #end if
+ 
+ lnsdx = log(sdx)
+ lnsdy = log(sdy)
+ 
+ paramSBVN = c(mu, lnsdx, lnsdy, corrXY, ThetaW)
+ paramSBVN = paramSBVN[1:(5+length(ThetaW))]
+ 
+ SBVN.fit = sbvnle(CurrentTrack,CurrentAList,locAvailFile, start.val=paramSBVN)
+ 
+ PrevBVNParamEsts[rownames(SBVN.fit$parTable)]=SBVN.fit$parTable[rownames(SBVN.fit$parTable),1]
+ 
+ #Transform back parameter estimates for sdx and sdy
+  UnTransSBVN.fit = SBVN.fit
+  UnTransSBVN.fit$parTable[3:4,1:4]=exp(SBVN.fit$parTable[3:4,1:4])
+  rownames(UnTransSBVN.fit$parTable)[3]="sdx"
+  rownames(UnTransSBVN.fit$parTable)[4]="sxy"
+ 
+ #Write output probability file to working directory
+ for (i in 1:length(CurrentAList)){
+ 	extentfile = names(AvailFileNames[i])
+ 	outputfile = paste("Prob_", origfilename,"_BVN_Model",k,"_", extentfile,sep = 	"")
+ 	write.table (UnTransSBVN.fit[[7]][[i]], file = outputfile, col.names = TRUE, 	row.names = F, sep = ",")
+ }
+ 
+ #Write output table to working directory
+ outputfile = paste("BVN_Model",k,"_Out.txt",sep = "")
+ tmp.wid = getOption("width")  # save current width
+ options(width=10000)
+ sink(outputfile)              # redirect output to file
+ print(UnTransSBVN.fit[1:6])    # print the object
+ sink()                        # cancel redirection
+ options(width=tmp.wid)        # restore linewidth
+ 
+ } #end loop through candidate models list
> 
> #===================================================================================
> #===================================================================================
> # Loop through candidate models; Exponential power null model
> 
> PrevExpParamEsts = array(0,(ncol(AvailList[[1]])+2))
> names(PrevExpParamEsts) = c("mu.x", "mu.y", "ln.scale", "ln.shape", colnames(AvailList[[1]])[-c(1:2)])
> 
> for (k in 1:length(ModelsList)){
+     #delete columns (i.e., variables) in Availability grids, and Track not used 
+       Nvariables = sum(ModelsList[[k]]) #number of variables in current model
+ 	CurrentAList=list()
+       CurrentTrack=Track[,1:3] 					#keep x, y and time
+ 	for (i in 1:length(AvailList)){
+ 	 CurrentAList[[i]]=AvailList[[i]][,1:2]			#keep x and y
+ 	} #end availability list loop
+       names(CurrentAList)=names(AvailFlList[[1]])){
WARNING: unknown option '-i'

ARGUMENT '005DDM' __ignored__


R version 2.10.1 (2009-12-14)
Copyright (C) 2009 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Synoptic Model for Analyzing Animal Space Use
> # By: Jon Horne; jhorne@uidaho.edu
> 
> i <- 0
> cluster <- ""
> options <- commandArgs()
> for(option in options) {
+            i <- i + 1
+            if(option == "-i"){
+            cluster <- options[i + 1]
+            }
+ }
> 
> # read in files:
> #(1) set working directory with input files
> #workdir = choose.dir(caption="Select folder with input files")
> basedir = getwd()
> workdir = paste(getwd(),"/data/",cluster, sep="")
> setwd(workdir)
> 
> #(2) choose file containing functions: GeneralFramework_SynopticModels.R
> genfile = paste(basedir,"/GeneralFrameWorkFitSynopticModels_11_AllExtents.r",sep="")
> source(file = genfile)
> 
> #(3) choose locations file:
> locationsfile = paste(cluster, "_all_locations.txt", sep="") 
>  
> origfilename = strsplit(locationsfile,"\\.")[[1]][1]
> Track = as.matrix(read.table(file= locationsfile,head=T,sep=''))
>  #separate text refering to availability file from track data
>  locAvailFile=Track[,ncol(Track)]
>  Track = apply(Track[,1:(ncol(Track)-1)],2,as.numeric)
> #(4) specify which variables will be used: use '1' to specify a variable that will be
> # used and '0' for variables that will not be used
> 
> ModelsList = list()
> ModelsList[1] = list(rep(0, ncol(Track)-3))  # No covariates==> null model of space use
> 
> #Modify these to do different models...  '1' means use the covariate '0' leave out
> ModelsList[2] = list(c(1, 1, 0))
> ModelsList[3] = list(c(1, 1, 1))
> ModelsList[4] = list(c(0,1,1))
> ModelsList[5] = list(c(1,0,1))
> 
> #============================================================================
> #For temporally changing habitat values, create a list of availability grids
> AvailFileNames = table(locAvailFile)
> AvailList=list()
> for (i in 1:length(AvailFileNames)){
+   #these two lines to test
+   filename = paste(workdir,"/",names(AvailFileNames)[i],sep="")
+   habmat = as.matrix(read.table(file=filename,head=T,sep=''))
+ # added by Polly to remove first column in avail files which is cougar ID
+ # Fuck you Polly!
+ #  habmat = apply(habmat[,2:(ncol(habmat))],2,as.numeric)
+   AvailList[i] = list(habmat)
+ }
> names(AvailList)=names(AvailFileNames)
> #====================================================================================
> #Standardize Covariates to range 0 to 1; this helps with likelihood calculations
> mins = matrix(NA,length(AvailList),ncol(AvailList[[1]]))
> maxs=mins
> 
> #Enter absolute minimum and maximum values for each covariate from all of the input availability grids
> #The first 2 columns are for x and y coordinates and mins and maxs can be set to 0, these values will be ingored
> #colmin = c(0,0,0,0,681)
> #colmax = c(0,0,420,63,18.25)
> #Auto calculating min max added 07/01/10
> minmaxfilename = paste(workdir,"/",cluster,"_master_avail.txt",sep="")
> minmaxfilename
[1] "/mnt/nfs/awells/SYN2/data/005DDM/005DDM_master_avail.txt"
> minmax = read.table(minmaxfilename, sep='\t',header=TRUE, as.is=TRUE) 
> colmin <- c()
> colmax <- c()
> ncol(minmax)
[1] 5
> for(i in 1:ncol(minmax)) {
+ 	colmin <- c(colmin, min(minmax[,i]))
+ 	colmax <- c(colmax, max(minmax[,i]))
+ }
> #end auto calc min max
> names(colmax) = c("mu.x", "mu.y", colnames(AvailList[[1]])[-c(1:2)])
> CoVarMinMax = matrix(0,2,ncol(AvailList[[1]]))
> CoVarMinMax[1,]=colmin
> CoVarMinMax[2,]=colmax
> colnames(CoVarMinMax)=names(colmax)
> rownames(CoVarMinMax)=c("min", "max")
> 
> #Write output file of minimum and maximum values for each input variable
> outputfile = paste(origfilename,"_CoVar_MinMax.txt", sep = "")
> data.frame(CoVarMinMax)
        mu.x    mu.y d2et slope elevm
min 590999.9 5122750    0     0   420
max 606424.9 5142750 1131    73  1789
> write.table (CoVarMinMax, file = outputfile)
> 
> #Standardize Covariates in Availability grids
> for (i in 1:length(AvailList)){
+  for (col in 3:ncol(AvailList[[1]])){
+   AvailList[[i]][,col]=(AvailList[[i]][,col]-colmin[col])/(colmax[col]-colmin[col])
+  } # end column loop
+ } # end list loop
> 
>  #Standardize Covariates in location data
>  for (col in 3:ncol(AvailList[[1]])){
+   Track[,col+1]=(Track[,col+1]-colmin[col])/(colmax[col]-colmin[col])
+  } # end column loop
> 
> #===================================================================================
> #===================================================================================
> # Loop through candidate models; Bivariate Normal null model
> 
> PrevBVNParamEsts = array(0,(ncol(AvailList[[1]])+3))
> names(PrevBVNParamEsts) = c("mu.x", "mu.y", "sd.x", "sd.y", "corr.x.y",colnames(AvailList[[1]])[-c(1:2)])
> 
> for (k in 1:length(ModelsList)){
+     #delete columns (i.e., variables) in Availability grids, and Track not used 
+       Nvariables = sum(ModelsList[[k]]) #number of variables in current model
+ 	CurrentAList=list()
+       CurrentTrack=Track[,1:3] 					#keep x, y and time
+ 	for (i in 1:length(AvailList)){
+ 	 CurrentAList[[i]]=AvailList[[i]][,1:2]			#keep x and y
+ 	} #end availability list loop
+       names(CurrentAList)=names(AvailFileNames)     	
+ 	cc=3
+ 	for (col in 3:ncol(AvailList[[1]])){
+ 	  if (ModelsList[[k]][col-2]==1){
+           CurrentTrack=cbind(CurrentTrack, Track[,col+1])
+           colnames(CurrentTrack)[cc+1]=colnames(AvailList[[i]])[col]
+ 	    for (i in 1:length(AvailList)){
+ 	       CurrentAList[[i]]=cbind(CurrentAList[[i]],AvailList[[i]][,col])
+              colnames(CurrentAList[[i]])[cc]=colnames(AvailList[[1]])[col]	
+ 	    } #end availability list loop  
+ 		cc = cc+1                  
+ 	  }# end if statement
+ 	} #end variable column loop
+     #-----------------------------------------------------------------------------------
+ ### Synoptic with bivariate normal
+ # Get initial parameter values
+ ThetaW = c(rep(0, ncol(CurrentTrack)-3))	#Initial RSF coeff. set to 0; no selection 
+ if (k==1){
+ mu = as.numeric(apply(Track[,1:2],2,mean))
+ sdx = sd(CurrentTrack[,1])
+ sdy = sd(CurrentTrack[,2])
+ corrXY = cor(CurrentTrack[,1],CurrentTrack[,2])
+ 
+ } else { #==> use estimated parameters of previous models (if they exist) for initial values
+  mu = SBVN.fit$parTable[1:2,1]
+  sdx = exp(SBVN.fit$parTable[3,1])
+  sdy = exp(SBVN.fit$parTable[4,1])
+  corrXY = (SBVN.fit$parTable[5,1])
+  names(ThetaW) = colnames(CurrentAList[[1]])[3:ncol(CurrentAList[[1]])]
+  for (i in 1:length(PrevBVNParamEsts)){
+   for (j in 1:length(ThetaW)){
+    if(names(PrevBVNParamEsts)[i]==names(ThetaW)[j]){
+     ThetaW[j]=PrevBVNParamEsts[i]
+    } #end if 
+   } #end ThetaW loop
+  } #end PrevBVNParamEsts loop
+ } #end if
+ 
+ lnsdx = log(sdx)
+ lnsdy = log(sdy)
+ 
+ paramSBVN = c(mu, lnsdx, lnsdy, corrXY, ThetaW)
+ paramSBVN = paramSBVN[1:(5+length(ThetaW))]
+ 
+ SBVN.fit = sbvnle(CurrentTrack,CurrentAList,locAvailFile, start.val=paramSBVN)
+ 
+ PrevBVNParamEsts[rownames(SBVN.fit$parTable)]=SBVN.fit$parTable[rownames(SBVN.fit$parTable),1]
+ 
+ #Transform back parameter estimates for sdx and sdy
+  UnTransSBVN.fit = SBVN.fit
+  UnTransSBVN.fit$parTable[3:4,1:4]=exp(SBVN.fit$parTable[3:4,1:4])
+  rownames(UnTransSBVN.fit$parTable)[3]="sdx"
+  rownames(UnTransSBVN.fit$parTable)[4]="sxy"
+ 
+ #Write output probability file to working directory
+ for (i in 1:length(CurrentAList)){
+ 	extentfile = names(AvailFileNames[i])
+ 	outputfile = paste("Prob_", origfilename,"_BVN_Model",k,"_", extentfile,sep = 	"")
+ 	write.table (UnTransSBVN.fit[[7]][[i]], file = outputfile, col.names = TRUE, 	row.names = F, sep = ",")
+ }
+ 
+ #Write output table to working directory
+ outputfile = paste("BVN_Model",k,"_Out.txt",sep = "")
+ tmp.wid = getOption("width")  # save current width
+ options(width=10000)
+ sink(outputfile)              # redirect output to file
+ print(UnTransSBVN.fit[1:6])    # print the object
+ sink()                        # cancel redirection
+ options(width=tmp.wid)        # restore linewidth
+ 
+ } #end loop through candidate models list
WARNING: unknown option '-i'

ARGUMENT '003SCF' __ignored__


R version 2.10.1 (2009-12-14)
Copyright (C) 2009 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Synoptic Model for Analyzing Animal Space Use
> # By: Jon Horne; jhorne@uidaho.edu
> 
> i <- 0
> cluster <- ""
> options <- commandArgs()
> for(option in options) {
+            i <- i + 1
+            if(option == "-i"){
+            cluster <- options[i + 1]
+            }
+ }
> 
> # read in files:
> #(1) set working directory with input files
> #workdir = choose.dir(caption="Select folder with input files")
> basedir = getwd()
> workdir = paste(getwd(),"/data/",cluster, sep="")
> setwd(workdir)
> 
> #(2) choose file containing functions: GeneralFramework_SynopticModels.R
> genfile = paste(basedir,"/GeneralFrameWorkFitSynopticModels_11_AllExtents.r",sep="")
> source(file = genfile)
> 
> #(3) choose locations file:
> locationsfile = paste(cluster, "_all_locations.txt", sep="") 
>  
> origfilename = strsplit(locationsfile,"\\.")[[1]][1]
> Track = as.matrix(read.table(file= locationsfile,head=T,sep=''))
>  #separate text refering to availability file from track data
>  locAvailFile=Track[,ncol(Track)]
>  Track = apply(Track[,1:(ncol(Track)-1)],2,as.numeric)
> #(4) specify which variables will be used: use '1' to specify a variable that will be
> # used and '0' for variables that will not be used
> 
> ModelsList = list()
> ModelsList[1] = list(rep(0, ncol(Track)-3))  # No covariates==> null model of space use
> 
> #Modify these to do different models...  '1' means use the covariate '0' leave out
> ModelsList[2] = list(c(1, 1, 0))
> ModelsList[3] = list(c(1, 1, 1))
> ModelsList[4] = list(c(0,1,1))
> ModelsList[5] = list(c(1,0,1))
> 
> #============================================================================
> #For temporally changing habitat values, create a list of availability grids
> AvailFileNames = table(locAvailFile)
> AvailList=list()
> for (i in 1:length(AvailFileNames)){
+   #these two lines to test
+   filename = paste(workdir,"/",names(AvailFileNames)[i],sep="")
+   habmat = as.matrix(read.table(file=filename,head=T,sep=''))
+ # added by Polly to remove first column in avail files which is cougar ID
+ # Fuck you Polly!
+ #  habmat = apply(habmat[,2:(ncol(habmat))],2,as.numeric)
+   AvailList[i] = list(habmat)
+ }
> names(AvailList)=names(AvailFileNames)
> #====================================================================================
> #Standardize Covariates to range 0 to 1; this helps with likelihood calculations
> mins = matrix(NA,length(AvailList),ncol(AvailList[[1]]))
> maxs=mins
> 
> #Enter absolute minimum and maximum values for each covariate from all of the input availability grids
> #The first 2 columns are for x and y coordinates and mins and maxs can be set to 0, these values will be ingored
> #colmin = c(0,0,0,0,681)
> #colmax = c(0,0,420,63,18.25)
> #Auto calculating min max added 07/01/10
> minmaxfilename = paste(workdir,"/",cluster,"_master_avail.txt",sep="")
> minmaxfilename
[1] "/mnt/nfs/awells/SYN2/data/003SCF/003SCF_master_avail.txt"
> minmax = read.table(minmaxfilename, sep='\t',header=TRUE, as.is=TRUE) 
> colmin <- c()
> colmax <- c()
> ncol(minmax)
[1] 5
> for(i in 1:ncol(minmax)) {
+ 	colmin <- c(colmin, min(minmax[,i]))
+ 	colmax <- c(colmax, max(minmax[,i]))
+ }
> #end auto calc min max
> names(colmax) = c("mu.x", "mu.y", colnames(AvailList[[1]])[-c(1:2)])
> CoVarMinMax = matrix(0,2,ncol(AvailList[[1]]))
> CoVarMinMax[1,]=colmin
> CoVarMinMax[2,]=colmax
> colnames(CoVarMinMax)=names(colmax)
> rownames(CoVarMinMax)=c("min", "max")
> 
> #Write output file of minimum and maximum values for each input variable
> outputfile = paste(origfilename,"_CoVar_MinMax.txt", sep = "")
> data.frame(CoVarMinMax)
        mu.x    mu.y  d2et slope elevm
min 604099.9 5147149 -9999 -9999 -9999
max 608999.9 5152249   420    63  1825
> write.table (CoVarMinMax, file = outputfile)
WARNING: unknown option '-i'

ARGUMENT '003SCF' __ignored__


R version 2.10.1 (2009-12-14)
Copyright (C) 2009 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Synoptic Model for Analyzing Animal Space Use
> # By: Jon Horne; jhorne@uidaho.edu
> 
> i <- 0
> cluster <- ""
> options <- commandArgs()
> for(option in options) {
+            i <- i + 1
+            if(option == "-i"){
+            cluster <- options[i + 1]
+            }
+ }
> 
> # read in files:
> #(1) set working directory with input files
> #workdir = choose.dir(caption="Select folder with input files")
> basedir = getwd()
> workdir = paste(getwd(),"/data/",cluster, sep="")
> setwd(workdir)
> 
> #(2) choose file containing functions: GeneralFramework_SynopticModels.R
> genfile = paste(basedir,"/GeneralFrameWorkFitSynopticModels_11_AllExtents.r",sep="")
> source(file = genfile)
> 
> #(3) choose locations file:
> locationsfile = paste(cluster, "_all_locations.txt", sep="") 
>  
> origfilename = strsplit(locationsfile,"\\.")[[1]][1]
> Track = as.matrix(read.table(file= locationsfile,head=T,sep=''))
>  #separate text refering to availability file from track data
>  locAvailFile=Track[,ncol(Track)]
>  Track = apply(Track[,1:(ncol(Track)-1)],2,as.numeric)
> #(4) specify which variables will be used: use '1' to specify a variable that will be
> # used and '0' for variables that will not be used
> 
> ModelsList = list()
> ModelsList[1] = list(rep(0, ncol(Track)-3))  # No covariates==> null model of space use
> 
> #Modify these to do different models...  '1' means use the covariate '0' leave out
> ModelsList[2] = list(c(1, 1, 0))
> ModelsList[3] = list(c(1, 1, 1))
> ModelsList[4] = list(c(0,1,1))
> ModelsList[5] = list(c(1,0,1))
> 
> #============================================================================
> #For temporally changing habitat values, create a list of availability grids
> AvailFileNames = table(locAvailFile)
> AvailList=list()
> for (i in 1:length(AvailFileNames)){
+   #these two lines to test
+   filename = paste(workdir,"/",names(AvailFileNames)[i],sep="")
+   habmat = as.matrix(read.table(file=filename,head=T,sep=''))
+ # added by Polly to remove first column in avail files which is cougar ID
+ # Fuck you Polly!
+ #  habmat = apply(habmat[,2:(ncol(habmat))],2,as.numeric)
+   AvailList[i] = list(habmat)
+ }
> names(AvailList)=names(AvailFileNames)
> #====================================================================================
> #Standardize Covariates to range 0 to 1; this helps with likelihood calculations
> mins = matrix(NA,length(AvailList),ncol(AvailList[[1]]))
> maxs=mins
> 
> #Enter absolute minimum and maximum values for each covariate from all of the input availability grids
> #The first 2 columns are for x and y coordinates and mins and maxs can be set to 0, these values will be ingored
> #colmin = c(0,0,0,0,681)
> #colmax = c(0,0,420,63,18.25)
> #Auto calculating min max added 07/01/10
> minmaxfilename = paste(workdir,"/",cluster,"_master_avail.txt",sep="")
> minmaxfilename
[1] "/mnt/nfs/awells/SYN2/data/003SCF/003SCF_master_avail.txt"
> minmax = read.table(minmaxfilename, sep='\t',header=TRUE, as.is=TRUE) 
> colmin <- c()
> colmax <- c()
> ncol(minmax)
[1] 5
> for(i in 1:ncol(minmax)) {
+ 	colmin <- c(colmin, min(minmax[,i]))
+ 	colmax <- c(colmax, max(minmax[,i]))
+ }
> #end auto calc min max
> names(colmax) = c("mu.x", "mu.y", colnames(AvailList[[1]])[-c(1:2)])
> CoVarMinMax = matrix(0,2,ncol(AvailList[[1]]))
> CoVarMinMax[1,]=colmin
> CoVarMinMax[2,]=colmax
> colnames(CoVarMinMax)=names(colmax)
> rownames(CoVarMinMax)=c("min", "max")
> 
> #Write output file of minimum and maximum values for each input variable
> outputfile = paste(origfilename,"_CoVar_MinMax.txt", sep = "")
> data.frame(CoVarMinMax)
        mu.x    mu.y  d2et slope elevm
min 604099.9 5147149 -9999 -9999 -9999
max 608999.9 5152249   420    63  1825
> write.table (CoVarMinMax, file = outputfile)
> 
> #Standardize Covariates in Availability grids
> for (i in 1:length(AvailList)){
+  for (col in 3:ncol(AvailList[[1]])){
+   AvailList[[i]][,col]=(AvailList[[i]][,col]-colmin[col])/(colmax[col]-colmin[col])
+  } # end column loop
+ } # end list loop
> 
>  #Standardize Covariates in location data
>  for (col in 3:ncol(AvailList[[1]])){
+   Track[,col+1]=(Track[,col+1]-colmin[col])/(colmax[col]-colmin[col])
+  } # end column loop
> 
> #===================================================================================
> #===================================================================================
> # Loop through candidate models; Bivariate Normal null model
> 
> PrevBVNParamEsts = array(0,(ncol(AvailList[[1]])+3))
> names(PrevBVNParamEsts) = c("mu.x", "mu.y", "sd.x", "sd.y", "corr.x.y",colnames(AvailList[[1]])[-c(1:2)])
> 
> 
> for (k in 1:length(ModelsList)){
+     #delete columns (i.e., variables) in Availability grids, and Track not used 
+       Nvariables = sum(ModelsList[[k]]) #number of variables in current model
+ 	CurrentAList=list()
+       CurrentTrack=Track[,1:3] 					#keep x, y and time
+ 	for (i in 1:length(AvailList)){
+ 	 CurrentAList[[i]]=AvailList[[i]][,1:2]			#keep x and y
+ 	} #end availability list loop
+       names(CurrentAList)=names(AvailFileNames)     	
+ 	cc=3
+ 	for (col in 3:ncol(AvailList[[1]])){
+ 	  if (ModelsList[[k]][col-2]==1){
+           CurrentTrack=cbind(CurrentTrack, Track[,col+1])
+           colnames(CurrentTrack)[cc+1]=colnames(AvailList[[i]])[col]
+ 	    for (i in 1:length(AvailList)){
+ 	       CurrentAList[[i]]=cbind(CurrentAList[[i]],AvailList[[i]][,col])
+              colnames(CurrentAList[[i]])[cc]=colnames(AvailList[[1]])[col]	
+ 	    } #end availability list loop  
+ 		cc = cc+1                  
+ 	  }# end if statement
+ 	} #end variable column loop
+     #-----------------------------------------------------------------------------------
+ ### Synoptic with bivariate normal
+ # Get initial parameter values
+ ThetaW = c(rep(0, ncol(CurrentTrack)-3))	#Initial RSF coeff. set to 0; no selection 
+ if (k==1){
+ mu = as.numeric(apply(Track[,1:2],2,mean))
+ sdx = sd(CurrentTrack[,1])
+ sdy = sd(CurrentTrack[,2])
+ corrXY = cor(CurrentTrack[,1],CurrentTrack[,2])
+ 
+ } else { #==> use estimated parameters of previous models (if they exist) for initial values
+  mu = SBVN.fit$parTable[1:2,1]
+  sdx = exp(SBVN.fit$parTable[3,1])
+  sdy = exp(SBVN.fit$parTable[4,1])
+  corrXY = (SBVN.fit$parTable[5,1])
+  names(ThetaW) = colnames(CurrentAList[[1]])[3:ncol(CurrentAList[[1]])]
+  for (i in 1:length(PrevBVNParamEsts)){
+   for (j in 1:length(ThetaW)){
+    if(names(PrevBVNParamEsts)[i]==names(ThetaW)[j]){
+     ThetaW[j]=PrevBVNParamEsts[i]
+    } #end if 
+   } #end ThetaW loop
+  } #end PrevBVNParamEsts loop
+ } #end if
+ 
+ lnsdx = log(sdx)
+ lnsdy = log(sdy)
+ 
+ paramSBVN = c(mu, lnsdx, lnsdy, corrXY, ThetaW)
+ paramSBVN = paramSBVN[1:(5+length(ThetaW))]
+ 
+ SBVN.fit = sbvnle(CurrentTrack,CurrentAList,locAvailFile, start.val=paramSBVN)
+ 
+ PrevBVNParamEsts[rownames(SBVN.fit$parTable)]=SBVN.fit$parTable[rownames(SBVN.fit$parTable),1]
+ 
+ #Transform back parameter estimates for sdx and sdy
+  UnTransSBVN.fit = SBVN.fit
+  UnTransSBVN.fit$parTable[3:4,1:4]=exp(SBVN.fit$parTable[3:4,1:4])
+  rownames(UnTransSBVN.fit$parTable)[3]="sdx"
+  rownames(UnTransSBVN.fit$parTable)[4]="sxy"
+ 
+ #Write output probability file to working directory
+ for (i in 1:length(CurrentAList)){
+ 	extentfile = names(AvailFileNames[i])
+ 	outputfile = paste("Prob_", origfilename,"_BVN_Model",k,"_", extentfile,sep = 	"")
+ 	write.table (UnTransSBVN.fit[[7]][[i]], file = outputfile, col.names = TRUE, 	row.names = F, sep = ",")
+ }
+ 
+ #Write output table to working directory
+ outputfile = paste("BVN_Model",k,"_Out.txt",sep = "")
+ tmp.wid = getOption("width")  # save current width
+ options(width=10000)
+ sink(outputfile)              # redirect output to file
+ print(UnTransSBVN.fit[1:6])    # print the object
+ sink()                        # cancel redirection
+ options(width=tmp.wid)        # restore linewidth
+ 
+ } #end loop through candidate models list
[1] "TS274: proct time of sbvnle optim"
WARNING: unknown option '-i'

ARGUMENT '004DDF' __ignored__


R version 2.10.1 (2009-12-14)
Copyright (C) 2009 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Synoptic Model for Analyzing Animal Space Use
> # By: Jon Horne; jhorne@uidaho.edu
> 
> i <- 0
> cluster <- ""
> options <- commandArgs()
> for(option in options) {
+            i <- i + 1
+            if(option == "-i"){
+            cluster <- options[i + 1]
+            }
+ }
> 
> # read in files:
> #(1) set working directory with input files
> #workdir = choose.dir(caption="Select folder with input files")
> basedir = getwd()
> workdir = paste(getwd(),"/data/",cluster, sep="")
> setwd(workdir)
> 
> #(2) choose file containing functions: GeneralFramework_SynopticModels.R
> genfile = paste(basedir,"/GeneralFrameWorkFitSynopticModels_11_AllExtents.r",sep="")
> source(file = genfile)
> 
> #(3) choose locations file:
> locationsfile = paste(cluster, "_all_locations.txt", sep="") 
>  
> origfilename = strsplit(locationsfile,"\\.")[[1]][1]
> Track = as.matrix(read.table(file= locationsfile,head=T,sep=''))
>  #separate text refering to availability file from track data
>  locAvailFile=Track[,ncol(Track)]
>  Track = apply(Track[,1:(ncol(Track)-1)],2,as.numeric)
> #(4) specify which variables will be used: use '1' to specify a variable that will be
> # used and '0' for variables that will not be used
> 
> ModelsList = list()
> ModelsList[1] = list(rep(0, ncol(Track)-3))  # No covariates==> null model of space use
> 
> #Modify these to do different models...  '1' means use the covariate '0' leave out
> ModelsList[2] = list(c(1, 1, 0))
> ModelsList[3] = list(c(1, 1, 1))
> ModelsList[4] = list(c(0,1,1))
> ModelsList[5] = list(c(1,0,1))
> 
> #============================================================================
> #For temporally changing habitat values, create a list of availability grids
> AvailFileNames = table(locAvailFile)
> AvailList=list()
> for (i in 1:length(AvailFileNames)){
+   #these two lines to test
+   filename = paste(workdir,"/",names(AvailFileNames)[i],sep="")
+   habmat = as.matrix(read.table(file=filename,head=T,sep=''))
+ # added by Polly to remove first column in avail files which is cougar ID
+ # Fuck you Polly!
+ #  habmat = apply(habmat[,2:(ncol(habmat))],2,as.numeric)
+   AvailList[i] = list(habmat)
+ }
> names(AvailList)=names(AvailFileNames)
> #====================================================================================
> #Standardize Covariates to range 0 to 1; this helps with likelihood calculations
> mins = matrix(NA,length(AvailList),ncol(AvailList[[1]]))
> maxs=mins
> 
> #Enter absolute minimum and maximum values for each covariate from all of the input availability grids
> #The first 2 columns are for x and y coordinates and mins and maxs can be set to 0, these values will be ingored
> #colmin = c(0,0,0,0,681)
> #colmax = c(0,0,420,63,18.25)
> #Auto calculating min max added 07/01/10
> minmaxfilename = paste(workdir,"/",cluster,"_master_avail.txt",sep="")
> minmaxfilename
[1] "/mnt/nfs/awells/SYN2/data/004DDF/004DDF_master_avail.txt"
> minmax = read.table(minmaxfilename, sep='\t',header=TRUE, as.is=TRUE) 
> colmin <- c()
> colmax <- c()
> ncol(minmax)
[1] 5
> for(i in 1:ncol(minmax)) {
+ 	colmin <- c(colmin, min(minmax[,i]))
+ 	colmax <- c(colmax, max(minmax[,i]))
+ }
> #end auto calc min max
> names(colmax) = c("mu.x", "mu.y", colnames(AvailList[[1]])[-c(1:2)])
> CoVarMinMax = matrix(0,2,ncol(AvailList[[1]]))
> CoVarMinMax[1,]=colmin
> CoVarMinMax[2,]=colmax
> colnames(CoVarMinMax)=names(colmax)
> rownames(CoVarMinMax)=c("min", "max")
> 
> #Write output file of minimum and maximum values for each input variable
> outputfile = paste(origfilename,"_CoVar_MinMax.txt", sep = "")
> data.frame(CoVarMinMax)
      mu.x    mu.y d2et slope elevm
min 593615 5125787    0     0   681
max 599990 5131962 1065    73  1789
> write.table (CoVarMinMax, file = outputfile)
WARNING: unknown option '-i'

ARGUMENT '004DDF' __ignored__


R version 2.10.1 (2009-12-14)
Copyright (C) 2009 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Synoptic Model for Analyzing Animal Space Use
> # By: Jon Horne; jhorne@uidaho.edu
> 
> i <- 0
> cluster <- ""
> options <- commandArgs()
> for(option in options) {
+            i <- i + 1
+            if(option == "-i"){
+            cluster <- options[i + 1]
+            }
+ }
> 
> # read in files:
> #(1) set working directory with input files
> #workdir = choose.dir(caption="Select folder with input files")
> basedir = getwd()
> workdir = paste(getwd(),"/data/",cluster, sep="")
> setwd(workdir)
> 
> #(2) choose file containing functions: GeneralFramework_SynopticModels.R
> genfile = paste(basedir,"/GeneralFrameWorkFitSynopticModels_11_AllExtents.r",sep="")
> source(file = genfile)
> 
> #(3) choose locations file:
> locationsfile = paste(cluster, "_all_locations.txt", sep="") 
>  
> origfilename = strsplit(locationsfile,"\\.")[[1]][1]
> Track = as.matrix(read.table(file= locationsfile,head=T,sep=''))
>  #separate text refering to availability file from track data
>  locAvailFile=Track[,ncol(Track)]
>  Track = apply(Track[,1:(ncol(Track)-1)],2,as.numeric)
> #(4) specify which variables will be used: use '1' to specify a variable that will be
> # used and '0' for variables that will not be used
> 
> ModelsList = list()
> ModelsList[1] = list(rep(0, ncol(Track)-3))  # No covariates==> null model of space use
> 
> #Modify these to do different models...  '1' means use the covariate '0' leave out
> ModelsList[2] = list(c(1, 1, 0))
> ModelsList[3] = list(c(1, 1, 1))
> ModelsList[4] = list(c(0,1,1))
> ModelsList[5] = list(c(1,0,1))
> 
> #============================================================================
> #For temporally changing habitat values, create a list of availability grids
> AvailFileNames = table(locAvailFile)
> AvailList=list()
> for (i in 1:length(AvailFileNames)){
+   #these two lines to test
+   filename = paste(workdir,"/",names(AvailFileNames)[i],sep="")
+   habmat = as.matrix(read.table(file=filename,head=T,sep=''))
+ # added by Polly to remove first column in avail files which is cougar ID
+ # Fuck you Polly!
+ #  habmat = apply(habmat[,2:(ncol(habmat))],2,as.numeric)
+   AvailList[i] = list(habmat)
+ }
> names(AvailList)=names(AvailFileNames)
> #====================================================================================
> #Standardize Covariates to range 0 to 1; this helps with likelihood calculations
> mins = matrix(NA,length(AvailList),ncol(AvailList[[1]]))
> maxs=mins
> 
> #Enter absolute minimum and maximum values for each covariate from all of the input availability grids
> #The first 2 columns are for x and y coordinates and mins and maxs can be set to 0, these values will be ingored
> #colmin = c(0,0,0,0,681)
> #colmax = c(0,0,420,63,18.25)
> #Auto calculating min max added 07/01/10
> minmaxfilename = paste(workdir,"/",cluster,"_master_avail.txt",sep="")
> minmaxfilename
[1] "/mnt/nfs/awells/SYN2/data/004DDF/004DDF_master_avail.txt"
> minmax = read.table(minmaxfilename, sep='\t',header=TRUE, as.is=TRUE) 
> colmin <- c()
> colmax <- c()
> ncol(minmax)
[1] 5
> for(i in 1:ncol(minmax)) {
+ 	colmin <- c(colmin, min(minmax[,i]))
+ 	colmax <- c(colmax, max(minmax[,i]))
+ }
> #end auto calc min max
> names(colmax) = c("mu.x", "mu.y", colnames(AvailList[[1]])[-c(1:2)])
> CoVarMinMax = matrix(0,2,ncol(AvailList[[1]]))
> CoVarMinMax[1,]=colmin
> CoVarMinMax[2,]=colmax
> colnames(CoVarMinMax)=names(colmax)
> rownames(CoVarMinMax)=c("min", "max")
> 
> #Write output file of minimum and maximum values for each input variable
> outputfile = paste(origfilename,"_CoVar_MinMax.txt", sep = "")
> data.frame(CoVarMinMax)
      mu.x    mu.y d2et slope elevm
min 593615 5125787    0     0   681
max 599990 5131962 1065    73  1789
> write.table (CoVarMinMax, file = outputfile)
WARNING: unknown option '-i'

ARGUMENT '004DDF' __ignored__


R version 2.10.1 (2009-12-14)
Copyright (C) 2009 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Synoptic Model for Analyzing Animal Space Use
> # By: Jon Horne; jhorne@uidaho.edu
> 
> i <- 0
> cluster <- ""
> options <- commandArgs()
> for(option in options) {
+            i <- i + 1
+            if(option == "-i"){
+            cluster <- options[i + 1]
+            }
+ }
> 
> # read in files:
> #(1) set working directory with input files
> #workdir = choose.dir(caption="Select folder with input files")
> basedir = getwd()
> workdir = paste(getwd(),"/data/",cluster, sep="")
> setwd(workdir)
> 
> #(2) choose file containing functions: GeneralFramework_SynopticModels.R
> genfile = paste(basedir,"/GeneralFrameWorkFitSynopticModels_11_AllExtents.r",sep="")
> source(file = genfile)
> 
> #(3) choose locations file:
> locationsfile = paste(cluster, "_all_locations.txt", sep="") 
>  
> origfilename = strsplit(locationsfile,"\\.")[[1]][1]
> Track = as.matrix(read.table(file= locationsfile,head=T,sep=''))
>  #separate text refering to availability file from track data
>  locAvailFile=Track[,ncol(Track)]
>  Track = apply(Track[,1:(ncol(Track)-1)],2,as.numeric)
> #(4) specify which variables will be used: use '1' to specify a variable that will be
> # used and '0' for variables that will not be used
> 
> ModelsList = list()
> ModelsList[1] = list(rep(0, ncol(Track)-3))  # No covariates==> null model of space use
> 
> #Modify these to do different models...  '1' means use the covariate '0' leave out
> ModelsList[2] = list(c(1, 1, 0))
> ModelsList[3] = list(c(1, 1, 1))
> ModelsList[4] = list(c(0,1,1))
> ModelsList[5] = list(c(1,0,1))
> 
> #============================================================================
> #For temporally changing habitat values, create a list of availability grids
> AvailFileNames = table(locAvailFile)
> AvailList=list()
> for (i in 1:length(AvailFileNames)){
+   #these two lines to test
+   filename = paste(workdir,"/",names(AvailFileNames)[i],sep="")
+   habmat = as.matrix(read.table(file=filename,head=T,sep=''))
+ # added by Polly to remove first column in avail files which is cougar ID
+ # Fuck you Polly!
+ #  habmat = apply(habmat[,2:(ncol(habmat))],2,as.numeric)
+   AvailList[i] = list(habmat)
+ }
> names(AvailList)=names(AvailFileNames)
> #====================================================================================
> #Standardize Covariates to range 0 to 1; this helps with likelihood calculations
> mins = matrix(NA,length(AvailList),ncol(AvailList[[1]]))
> maxs=mins
> 
> #Enter absolute minimum and maximum values for each covariate from all of the input availability grids
> #The first 2 columns are for x and y coordinates and mins and maxs can be set to 0, these values will be ingored
> #colmin = c(0,0,0,0,681)
> #colmax = c(0,0,420,63,18.25)
> #Auto calculating min max added 07/01/10
> minmaxfilename = paste(workdir,"/",cluster,"_master_avail.txt",sep="")
> minmaxfilename
[1] "/mnt/nfs/awells/SYN2/data/004DDF/004DDF_master_avail.txt"
> minmax = read.table(minmaxfilename, sep='\t',header=TRUE, as.is=TRUE) 
> colmin <- c()
> colmax <- c()
> ncol(minmax)
[1] 5
> for(i in 1:ncol(minmax)) {
+ 	colmin <- c(colmin, min(minmax[,i]))
+ 	colmax <- c(colmax, max(minmax[,i]))
+ }
> #end auto calc min max
> names(colmax) = c("mu.x", "mu.y", colnames(AvailList[[1]])[-c(1:2)])
> CoVarMinMax = matrix(0,2,ncol(AvailList[[1]]))
> CoVarMinMax[1,]=colmin
> CoVarMinMax[2,]=colmax
> colnames(CoVarMinMax)=names(colmax)
> rownames(CoVarMinMax)=c("min", "max")
> 
> #Write output file of minimum and maximum values for each input variable
> outputfile = paste(origfilename,"_CoVar_MinMax.txt", sep = "")
> data.frame(CoVarMinMax)
      mu.x    mu.y d2et slope elevm
min 593615 5125787    0     0   681
max 599990 5131962 1065    73  1789
> write.table (CoVarMinMax, file = outputfile)
WARNING: unknown option '-i'

ARGUMENT '004DDF' __ignored__


R version 2.10.1 (2009-12-14)
Copyright (C) 2009 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Synoptic Model for Analyzing Animal Space Use
> # By: Jon Horne; jhorne@uidaho.edu
> 
> i <- 0
> cluster <- ""
> options <- commandArgs()
> for(option in options) {
+            i <- i + 1
+            if(option == "-i"){
+            cluster <- options[i + 1]
+            }
+ }
> 
> # read in files:
> #(1) set working directory with input files
> #workdir = choose.dir(caption="Select folder with input files")
> basedir = getwd()
> workdir = paste(getwd(),"/data/",cluster, sep="")
> setwd(workdir)
> 
> #(2) choose file containing functions: GeneralFramework_SynopticModels.R
> genfile = paste(basedir,"/GeneralFrameWorkFitSynopticModels_11_AllExtents.r",sep="")
> source(file = genfile)
> 
> #(3) choose locations file:
> locationsfile = paste(cluster, "_all_locations.txt", sep="") 
>  
> origfilename = strsplit(locationsfile,"\\.")[[1]][1]
> Track = as.matrix(read.table(file= locationsfile,head=T,sep=''))
>  #separate text refering to availability file from track data
>  locAvailFile=Track[,ncol(Track)]
>  Track = apply(Track[,1:(ncol(Track)-1)],2,as.numeric)
> #(4) specify which variables will be used: use '1' to specify a variable that will be
> # used and '0' for variables that will not be used
> 
> ModelsList = list()
> ModelsList[1] = list(rep(0, ncol(Track)-3))  # No covariates==> null model of space use
> 
> #Modify these to do different models...  '1' means use the covariate '0' leave out
> ModelsList[2] = list(c(1, 1, 0))
> ModelsList[3] = list(c(1, 1, 1))
> ModelsList[4] = list(c(0,1,1))
> ModelsList[5] = list(c(1,0,1))
> 
> #============================================================================
> #For temporally changing habitat values, create a list of availability grids
> AvailFileNames = table(locAvailFile)
> AvailList=list()
> for (i in 1:length(AvailFileNames)){
+   #these two lines to test
+   filename = paste(workdir,"/",names(AvailFileNames)[i],sep="")
+   habmat = as.matrix(read.table(file=filename,head=T,sep=''))
+ # added by Polly to remove first column in avail files which is cougar ID
+ # Fuck you Polly!
+ #  habmat = apply(habmat[,2:(ncol(habmat))],2,as.numeric)
+   AvailList[i] = list(habmat)
+ }
> names(AvailList)=names(AvailFileNames)
> #====================================================================================
> #Standardize Covariates to range 0 to 1; this helps with likelihood calculations
> mins = matrix(NA,length(AvailList),ncol(AvailList[[1]]))
> maxs=mins
> 
> #Enter absolute minimum and maximum values for each covariate from all of the input availability grids
> #The first 2 columns are for x and y coordinates and mins and maxs can be set to 0, these values will be ingored
> #colmin = c(0,0,0,0,681)
> #colmax = c(0,0,420,63,18.25)
> #Auto calculating min max added 07/01/10
> minmaxfilename = paste(workdir,"/",cluster,"_master_avail.txt",sep="")
> minmaxfilename
[1] "/mnt/nfs/awells/SYN2/data/004DDF/004DDF_master_avail.txt"
> minmax = read.table(minmaxfilename, sep='\t',header=TRUE, as.is=TRUE) 
> colmin <- c()
> colmax <- c()
> ncol(minmax)
[1] 5
> for(i in 1:ncol(minmax)) {
+ 	colmin <- c(colmin, min(minmax[,i]))
+ 	colmax <- c(colmax, max(minmax[,i]))
+ }
> #end auto calc min max
> names(colmax) = c("mu.x", "mu.y", colnames(AvailList[[1]])[-c(1:2)])
> CoVarMinMax = matrix(0,2,ncol(AvailList[[1]]))
> CoVarMinMax[1,]=colmin
> CoVarMinMax[2,]=colmax
> colnames(CoVarMinMax)=names(colmax)
> rownames(CoVarMinMax)=c("min", "max")
> 
> #Write output file of minimum and maximum values for each input variable
> outputfile = paste(origfilename,"_CoVar_MinMax.txt", sep = "")
> data.frame(CoVarMinMax)
      mu.x    mu.y d2et slope elevm
min 593615 5125787    0     0   681
max 599990 5131962 1065    73  1789
> write.table (CoVarMinMax, file = outputfile)
WARNING: unknown option '-i'

ARGUMENT '004DDF' __ignored__


R version 2.10.1 (2009-12-14)
Copyright (C) 2009 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Synoptic Model for Analyzing Animal Space Use
> # By: Jon Horne; jhorne@uidaho.edu
> 
> i <- 0
> cluster <- ""
> options <- commandArgs()
> for(option in options) {
+            i <- i + 1
+            if(option == "-i"){
+            cluster <- options[i + 1]
+            }
+ }
> 
> # read in files:
> #(1) set working directory with input files
> #workdir = choose.dir(caption="Select folder with input files")
> basedir = getwd()
> workdir = paste(getwd(),"/data/",cluster, sep="")
> setwd(workdir)
> 
> #(2) choose file containing functions: GeneralFramework_SynopticModels.R
> genfile = paste(basedir,"/GeneralFrameWorkFitSynopticModels_11_AllExtents.r",sep="")
> source(file = genfile)
> 
> #(3) choose locations file:
> locationsfile = paste(cluster, "_all_locations.txt", sep="") 
>  
> origfilename = strsplit(locationsfile,"\\.")[[1]][1]
> Track = as.matrix(read.table(file= locationsfile,head=T,sep=''))
>  #separate text refering to availability file from track data
>  locAvailFile=Track[,ncol(Track)]
>  Track = apply(Track[,1:(ncol(Track)-1)],2,as.numeric)
> #(4) specify which variables will be used: use '1' to specify a variable that will be
> # used and '0' for variables that will not be used
> 
> ModelsList = list()
> ModelsList[1] = list(rep(0, ncol(Track)-3))  # No covariates==> null model of space use
> 
> #Modify these to do different models...  '1' means use the covariate '0' leave out
> ModelsList[2] = list(c(1, 1, 0))
> ModelsList[3] = list(c(1, 1, 1))
> ModelsList[4] = list(c(0,1,1))
> ModelsList[5] = list(c(1,0,1))
> 
> #============================================================================
> #For temporally changing habitat values, create a list of availability grids
> AvailFileNames = table(locAvailFile)
> AvailList=list()
> for (i in 1:length(AvailFileNames)){
+   #these two lines to test
+   filename = paste(workdir,"/",names(AvailFileNames)[i],sep="")
+   habmat = as.matrix(read.table(file=filename,head=T,sep=''))
+ # added by Polly to remove first column in avail files which is cougar ID
+ # Fuck you Polly!
+ #  habmat = apply(habmat[,2:(ncol(habmat))],2,as.numeric)
+   AvailList[i] = list(habmat)
+ }
> names(AvailList)=names(AvailFileNames)
> #====================================================================================
> #Standardize Covariates to range 0 to 1; this helps with likelihood calculations
> mins = matrix(NA,length(AvailList),ncol(AvailList[[1]]))
> maxs=mins
> 
> #Enter absolute minimum and maximum values for each covariate from all of the input availability grids
> #The first 2 columns are for x and y coordinates and mins and maxs can be set to 0, these values will be ingored
> #colmin = c(0,0,0,0,681)
> #colmax = c(0,0,420,63,18.25)
> #Auto calculating min max added 07/01/10
> minmaxfilename = paste(workdir,"/",cluster,"_master_avail.txt",sep="")
> minmaxfilename
[1] "/mnt/nfs/awells/SYN2/data/004DDF/004DDF_master_avail.txt"
> minmax = read.table(minmaxfilename, sep='\t',header=TRUE, as.is=TRUE) 
> colmin <- c()
> colmax <- c()
> ncol(minmax)
[1] 5
> for(i in 1:ncol(minmax)) {
+ 	colmin <- c(colmin, min(minmax[,i]))
+ 	colmax <- c(colmax, max(minmax[,i]))
+ }
> #end auto calc min max
> names(colmax) = c("mu.x", "mu.y", colnames(AvailList[[1]])[-c(1:2)])
> CoVarMinMax = matrix(0,2,ncol(AvailList[[1]]))
> CoVarMinMax[1,]=colmin
> CoVarMinMax[2,]=colmax
> colnames(CoVarMinMax)=names(colmax)
> rownames(CoVarMinMax)=c("min", "max")
> 
> #Write output file of minimum and maximum values for each input variable
> outputfile = paste(origfilename,"_CoVar_MinMax.txt", sep = "")
> data.frame(CoVarMinMax)
      mu.x    mu.y d2et slope elevm
min 593615 5125787    0     0   681
max 599990 5131962 1065    73  1789
> write.table (CoVarMinMax, file = outputfile)
WARNING: unknown option '-i'

ARGUMENT '004DDF' __ignored__


R version 2.10.1 (2009-12-14)
Copyright (C) 2009 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Synoptic Model for Analyzing Animal Space Use
> # By: Jon Horne; jhorne@uidaho.edu
> 
> i <- 0
> cluster <- ""
> options <- commandArgs()
> for(option in options) {
+            i <- i + 1
+            if(option == "-i"){
+            cluster <- options[i + 1]
+            }
+ }
> 
> # read in files:
> #(1) set working directory with input files
> #workdir = choose.dir(caption="Select folder with input files")
> basedir = getwd()
> workdir = paste(getwd(),"/data/",cluster, sep="")
> setwd(workdir)
> 
> #(2) choose file containing functions: GeneralFramework_SynopticModels.R
> genfile = paste(basedir,"/GeneralFrameWorkFitSynopticModels_11_AllExtents.r",sep="")
> source(file = genfile)
> 
> #(3) choose locations file:
> locationsfile = paste(cluster, "_all_locations.txt", sep="") 
>  
> origfilename = strsplit(locationsfile,"\\.")[[1]][1]
> Track = as.matrix(read.table(file= locationsfile,head=T,sep=''))
>  #separate text refering to availability file from track data
>  locAvailFile=Track[,ncol(Track)]
>  Track = apply(Track[,1:(ncol(Track)-1)],2,as.numeric)
> #(4) specify which variables will be used: use '1' to specify a variable that will be
> # used and '0' for variables that will not be used
> 
> ModelsList = list()
> ModelsList[1] = list(rep(0, ncol(Track)-3))  # No covariates==> null model of space use
> 
> #Modify these to do different models...  '1' means use the covariate '0' leave out
> ModelsList[2] = list(c(1, 1, 0))
> ModelsList[3] = list(c(1, 1, 1))
> ModelsList[4] = list(c(0,1,1))
> ModelsList[5] = list(c(1,0,1))
> 
> #============================================================================
> #For temporally changing habitat values, create a list of availability grids
> AvailFileNames = table(locAvailFile)
> AvailList=list()
> for (i in 1:length(AvailFileNames)){
+   #these two lines to test
+   filename = paste(workdir,"/",names(AvailFileNames)[i],sep="")
+   habmat = as.matrix(read.table(file=filename,head=T,sep=''))
+ # added by Polly to remove first column in avail files which is cougar ID
+ # Fuck you Polly!
+ #  habmat = apply(habmat[,2:(ncol(habmat))],2,as.numeric)
+   AvailList[i] = list(habmat)
+ }
> names(AvailList)=names(AvailFileNames)
> #====================================================================================
> #Standardize Covariates to range 0 to 1; this helps with likelihood calculations
> mins = matrix(NA,length(AvailList),ncol(AvailList[[1]]))
> maxs=mins
> 
> #Enter absolute minimum and maximum values for each covariate from all of the input availability grids
> #The first 2 columns are for x and y coordinates and mins and maxs can be set to 0, these values will be ingored
> #colmin = c(0,0,0,0,681)
> #colmax = c(0,0,420,63,18.25)
> #Auto calculating min max added 07/01/10
> minmaxfilename = paste(workdir,"/",cluster,"_master_avail.txt",sep="")
> minmaxfilename
[1] "/mnt/nfs/awells/SYN2/data/004DDF/004DDF_master_avail.txt"
> minmax = read.table(minmaxfilename, sep='\t',header=TRUE, as.is=TRUE) 
> colmin <- c()
> colmax <- c()
> ncol(minmax)
[1] 5
> for(i in 1:ncol(minmax)) {
+ 	colmin <- c(colmin, min(minmax[,i]))
+ 	colmax <- c(colmax, max(minmax[,i]))
+ }
> #end auto calc min max
> names(colmax) = c("mu.x", "mu.y", colnames(AvailList[[1]])[-c(1:2)])
> CoVarMinMax = matrix(0,2,ncol(AvailList[[1]]))
> CoVarMinMax[1,]=colmin
> CoVarMinMax[2,]=colmax
> colnames(CoVarMinMax)=names(colmax)
> rownames(CoVarMinMax)=c("min", "max")
> 
> #Write output file of minimum and maximum values for each input variable
> outputfile = paste(origfilename,"_CoVar_MinMax.txt", sep = "")
> data.frame(CoVarMinMax)
      mu.x    mu.y d2et slope elevm
min 593615 5125787    0     0   681
max 599990 5131962 1065    73  1789
> write.table (CoVarMinMax, file = outputfile)
> 
> #Standardize Covariates in Availability grids
> for (i in 1:length(AvailList)){
+  for (col in 3:ncol(AvailList[[1]])){
+   AvailList[[i]][,col]=(AvailList[[i]][,col]-colmin[col])/(colmax[col]-colmin[col])
+  } # end column loop
+ } # end list loop
> 
>  #Standardize Covariates in location data
>  for (col in 3:ncol(AvailList[[1]])){
+   Track[,col+1]=(Track[,col+1]-colmin[col])/(colmax[col]-colmin[col])
+  } # end column loop
> 
> #===================================================================================
> #===================================================================================
> # Loop through candidate models; Bivariate Normal null model
> 
> PrevBVNParamEsts = array(0,(ncol(AvailList[[1]])+3))
> names(PrevBVNParamEsts) = c("mu.x", "mu.y", "sd.x", "sd.y", "corr.x.y",colnames(AvailList[[1]])[-c(1:2)])
> 
> 
> for (k in 1:length(ModelsList)){
+     #delete columns (i.e., variables) in Availability grids, and Track not used 
+       Nvariables = sum(ModelsList[[k]]) #number of variables in current model
+ 	CurrentAList=list()
+       CurrentTrack=Track[,1:3] 					#keep x, y and time
+ 	for (i in 1:length(AvailList)){
+ 	 CurrentAList[[i]]=AvailList[[i]][,1:2]			#keep x and y
+ 	} #end availability list loop
+       names(CurrentAList)=names(AvailFileNames)     	
+ 	cc=3
+ 	for (col in 3:ncol(AvailList[[1]])){
+ 	  if (ModelsList[[k]][col-2]==1){
+           CurrentTrack=cbind(CurrentTrack, Track[,col+1])
+           colnames(CurrentTrack)[cc+1]=colnames(AvailList[[i]])[col]
+ 	    for (i in 1:length(AvailList)){
+ 	       CurrentAList[[i]]=cbind(CurrentAList[[i]],AvailList[[i]][,col])
+              colnames(CurrentAList[[i]])[cc]=colnames(AvailList[[1]])[col]	
+ 	    } #end availability list loop  
+ 		cc = cc+1                  
+ 	  }# end if statement
+ 	} #end variable column loop
+     #-----------------------------------------------------------------------------------
+ ### Synoptic with bivariate normal
+ # Get initial parameter values
+ ThetaW = c(rep(0, ncol(CurrentTrack)-3))	#Initial RSF coeff. set to 0; no selection 
+ if (k==1){
+ mu = as.numeric(apply(Track[,1:2],2,mean))
+ sdx = sd(CurrentTrack[,1])
+ sdy = sd(CurrentTrack[,2])
+ corrXY = cor(CurrentTrack[,1],CurrentTrack[,2])
+ 
+ } else { #==> use estimated parameters of previous models (if they exist) for initial values
+  mu = SBVN.fit$parTable[1:2,1]
+  sdx = exp(SBVN.fit$parTable[3,1])
+  sdy = exp(SBVN.fit$parTable[4,1])
+  corrXY = (SBVN.fit$parTable[5,1])
+  names(ThetaW) = colnames(CurrentAList[[1]])[3:ncol(CurrentAList[[1]])]
+  for (i in 1:length(PrevBVNParamEsts)){
+   for (j in 1:length(ThetaW)){
+    if(names(PrevBVNParamEsts)[i]==names(ThetaW)[j]){
+     ThetaW[j]=PrevBVNParamEsts[i]
+    } #end if 
+   } #end ThetaW loop
+  } #end PrevBVNParamEsts loop
+ } #end if
+ 
+ lnsdx = log(sdx)
+ lnsdy = log(sdy)
+ 
+ paramSBVN = c(mu, lnsdx, lnsdy, corrXY, ThetaW)
+ paramSBVN = paramSBVN[1:(5+length(ThetaW))]
+ 
+ SBVN.fit = sbvnle(CurrentTrack,CurrentAList,locAvailFile, start.val=paramSBVN)
+ 
+ PrevBVNParamEsts[rownames(SBVN.fit$parTable)]=SBVN.fit$parTable[rownames(SBVN.fit$parTable),1]
+ 
+ #Transform back parameter estimates for sdx and sdy
+  UnTransSBVN.fit = SBVN.fit
+  UnTransSBVN.fit$parTable[3:4,1:4]=exp(SBVN.fit$parTable[3:4,1:4])
+  rownames(UnTransSBVN.fit$parTable)[3]="sdx"
+  rownames(UnTransSBVN.fit$parTable)[4]="sxy"
+ 
+ #Write output probability file to working directory
+ for (i in 1:length(CurrentAList)){
+ 	extentfile = names(AvailFileNames[i])
+ 	outputfile = paste("Prob_", origfilename,"_BVN_Model",k,"_", extentfile,sep = 	"")
+ 	write.table (UnTransSBVN.fit[[7]][[i]], file = outputfile, col.names = TRUE, 	row.names = F, sep = ",")
+ }
+ 
+ #Write output table to working directory
+ outputfile = paste("BVN_Model",k,"_Out.txt",sep = "")
+ tmp.wid = getOption("width")  # save current width
+ options(width=10000)
+ sink(outputfile)              # redirect output to file
+ print(UnTransSBVN.fit[1:6])    # print the object
+ sink()                        # cancel redirection
+ options(width=tmp.wid)        # restore linewidth
+ 
+ } #end loop through candidate models list
[1] "TS274: proct time of sbvnle optim"
   user  system elapsed 
265.129   2.143 280.260 
WARNING: unknown option '-i'

ARGUMENT '004DDF' __ignored__


R version 2.10.1 (2009-12-14)
Copyright (C) 2009 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Synoptic Model for Analyzing Animal Space Use
> # By: Jon Horne; jhorne@uidaho.edu
> 
> i <- 0
> cluster <- ""
> options <- commandArgs()
> for(option in options) {
+            i <- i + 1
+            if(option == "-i"){
+            cluster <- options[i + 1]
+            }
+ }
> 
> # read in files:
> #(1) set working directory with input files
> #workdir = choose.dir(caption="Select folder with input files")
> basedir = getwd()
> workdir = paste(getwd(),"/data/",cluster, sep="")
> setwd(workdir)
> 
> #(2) choose file containing functions: GeneralFramework_SynopticModels.R
> genfile = paste(basedir,"/GeneralFrameWorkFitSynopticModels_11_AllExtents.r",sep="")
> source(file = genfile)
> 
> #(3) choose locations file:
> locationsfile = paste(cluster, "_all_locations.txt", sep="") 
>  
> origfilename = strsplit(locationsfile,"\\.")[[1]][1]
> Track = as.matrix(read.table(file= locationsfile,head=T,sep=''))
>  #separate text refering to availability file from track data
>  locAvailFile=Track[,ncol(Track)]
>  Track = apply(Track[,1:(ncol(Track)-1)],2,as.numeric)
> #(4) specify which variables will be used: use '1' to specify a variable that will be
> # used and '0' for variables that will not be used
> 
> ModelsList = list()
> ModelsList[1] = list(rep(0, ncol(Track)-3))  # No covariates==> null model of space use
> 
> #Modify these to do different models...  '1' means use the covariate '0' leave out
> ModelsList[2] = list(c(1, 1, 0))
> ModelsList[3] = list(c(1, 1, 1))
> ModelsList[4] = list(c(0,1,1))
> ModelsList[5] = list(c(1,0,1))
> 
> #============================================================================
> #For temporally changing habitat values, create a list of availability grids
> AvailFileNames = table(locAvailFile)
> AvailList=list()
> for (i in 1:length(AvailFileNames)){
+   #these two lines to test
+   filename = paste(workdir,"/",names(AvailFileNames)[i],sep="")
+   habmat = as.matrix(read.table(file=filename,head=T,sep=''))
+ # added by Polly to remove first column in avail files which is cougar ID
+ # Fuck you Polly!
+ #  habmat = apply(habmat[,2:(ncol(habmat))],2,as.numeric)
+   AvailList[i] = list(habmat)
+ }
> names(AvailList)=names(AvailFileNames)
> #====================================================================================
> #Standardize Covariates to range 0 to 1; this helps with likelihood calculations
> mins = matrix(NA,length(AvailList),ncol(AvailList[[1]]))
> maxs=mins
> 
> #Enter absolute minimum and maximum values for each covariate from all of the input availability grids
> #The first 2 columns are for x and y coordinates and mins and maxs can be set to 0, these values will be ingored
> #colmin = c(0,0,0,0,681)
> #colmax = c(0,0,420,63,18.25)
> #Auto calculating min max added 07/01/10
> minmaxfilename = paste(workdir,"/",cluster,"_master_avail.txt",sep="")
> minmaxfilename
[1] "/mnt/nfs/awells/SYN2/data/004DDF/004DDF_master_avail.txt"
> minmax = read.table(minmaxfilename, sep='\t',header=TRUE, as.is=TRUE) 
> colmin <- c()
> colmax <- c()
> ncol(minmax)
[1] 5
> for(i in 1:ncol(minmax)) {
+ 	colmin <- c(colmin, min(minmax[,i]))
+ 	colmax <- c(colmax, max(minmax[,i]))
+ }
> #end auto calc min max
> names(colmax) = c("mu.x", "mu.y", colnames(AvailList[[1]])[-c(1:2)])
> CoVarMinMax = matrix(0,2,ncol(AvailList[[1]]))
> CoVarMinMax[1,]=colmin
> CoVarMinMax[2,]=colmax
> colnames(CoVarMinMax)=names(colmax)
> rownames(CoVarMinMax)=c("min", "max")
> 
> #Write output file of minimum and maximum values for each input variable
> outputfile = paste(origfilename,"_CoVar_MinMax.txt", sep = "")
> data.frame(CoVarMinMax)
      mu.x    mu.y d2et slope elevm
min 593615 5125787    0     0   681
max 599990 5131962 1065    73  1789
> write.table (CoVarMinMax, file = outputfile)
> 
> #Standardize Covariates in Availability grids
> for (i in 1:length(AvailList)){
+  for (col in 3:ncol(AvailList[[1]])){
+   AvailList[[i]][,col]=(AvailList[[i]][,col]-colmin[col])/(colmax[col]-colmin[col])
+  } # end column loop
+ } # end list loop
> 
>  #Standardize Covariates in location data
>  for (col in 3:ncol(AvailList[[1]])){
+   Track[,col+1]=(Track[,col+1]-colmin[col])/(colmax[col]-colmin[col])
+  } # end column loop
> 
> #===================================================================================
> #===================================================================================
> # Loop through candidate models; Bivariate Normal null model
> 
> PrevBVNParamEsts = array(0,(ncol(AvailList[[1]])+3))
> names(PrevBVNParamEsts) = c("mu.x", "mu.y", "sd.x", "sd.y", "corr.x.y",colnames(AvailList[[1]])[-c(1:2)])
> 
> 
> for (k in 1:length(ModelsList)){
+     #delete columns (i.e., variables) in Availability grids, and Track not used 
+       Nvariables = sum(ModelsList[[k]]) #number of variables in current model
+ 	CurrentAList=list()
+       CurrentTrack=Track[,1:3] 					#keep x, y and time
+ 	for (i in 1:length(AvailList)){
+ 	 CurrentAList[[i]]=AvailList[[i]][,1:2]			#keep x and y
+ 	} #end availability list loop
+       names(CurrentAList)=names(AvailFileNames)     	
+ 	cc=3
+ 	for (col in 3:ncol(AvailList[[1]])){
+ 	  if (ModelsList[[k]][col-2]==1){
+           CurrentTrack=cbind(CurrentTrack, Track[,col+1])
+           colnames(CurrentTrack)[cc+1]=colnames(AvailList[[i]])[col]
+ 	    for (i in 1:length(AvailList)){
+ 	       CurrentAList[[i]]=cbind(CurrentAList[[i]],AvailList[[i]][,col])
+              colnames(CurrentAList[[i]])[cc]=colnames(AvailList[[1]])[col]	
+ 	    } #end availability list loop  
+ 		cc = cc+1                  
+ 	  }# end if statement
+ 	} #end variable column loop
+     #-----------------------------------------------------------------------------------
+ ### Synoptic with bivariate normal
+ # Get initial parameter values
+ ThetaW = c(rep(0, ncol(CurrentTrack)-3))	#Initial RSF coeff. set to 0; no selection 
+ if (k==1){
+ mu = as.numeric(apply(Track[,1:2],2,mean))
+ sdx = sd(CurrentTrack[,1])
+ sdy = sd(CurrentTrack[,2])
+ corrXY = cor(CurrentTrack[,1],CurrentTrack[,2])
+ 
+ } else { #==> use estimated parameters of previous models (if they exist) for initial values
+  mu = SBVN.fit$parTable[1:2,1]
+  sdx = exp(SBVN.fit$parTable[3,1])
+  sdy = exp(SBVN.fit$parTable[4,1])
+  corrXY = (SBVN.fit$parTable[5,1])
+  names(ThetaW) = colnames(CurrentAList[[1]])[3:ncol(CurrentAList[[1]])]
+  for (i in 1:length(PrevBVNParamEsts)){
+   for (j in 1:length(ThetaW)){
+    if(names(PrevBVNParamEsts)[i]==names(ThetaW)[j]){
+     ThetaW[j]=PrevBVNParamEsts[i]
+    } #end if 
+   } #end ThetaW loop
+  } #end PrevBVNParamEsts loop
+ } #end if
+ 
+ lnsdx = log(sdx)
+ lnsdy = log(sdy)
+ 
+ paramSBVN = c(mu, lnsdx, lnsdy, corrXY, ThetaW)
+ paramSBVN = paramSBVN[1:(5+length(ThetaW))]
+ 
+ SBVN.fit = sbvnle(CurrentTrack,CurrentAList,locAvailFile, start.val=paramSBVN)
+ 
+ PrevBVNParamEsts[rownames(SBVN.fit$parTable)]=SBVN.fit$parTable[rownames(SBVN.fit$parTable),1]
+ 
+ #Transform back parameter estimates for sdx and sdy
+  UnTransSBVN.fit = SBVN.fit
+  UnTransSBVN.fit$parTable[3:4,1:4]=exp(SBVN.fit$parTable[3:4,1:4])
+  rownames(UnTransSBVN.fit$parTable)[3]="sdx"
+  rownames(UnTransSBVN.fit$parTable)[4]="sxy"
+ 
+ #Write output probability file to working directory
+ for (i in 1:length(CurrentAList)){
+ 	extentfile = names(AvailFileNames[i])
+ 	outputfile = paste("Prob_", origfilename,"_BVN_Model",k,"_", extentfile,sep = 	"")
+ 	write.table (UnTransSBVN.fit[[7]][[i]], file = outputfile, col.names = TRUE, 	row.names = F, sep = ",")
+ }
+ 
+ #Write output table to working directory
+ outputfile = paste("BVN_Model",k,"_Out.txt",sep = "")
+ tmp.wid = getOption("width")  # save current width
+ options(width=10000)
+ sink(outputfile)              # redirect output to file
+ print(UnTransSBVN.fit[1:6])    # print the object
+ sink()                        # cancel redirection
+ options(width=tmp.wid)        # restore linewidth
+ 
+ } #end loop through candidate models list
[1] "TS274: proct time of sbvnle optim"
    user   system  elapsed 
2899.862   69.968 2982.599 
    user   system  elapsed 
3020.716   69.873 3108.230 
WARNING: unknown option '-i'


R version 2.10.1 (2009-12-14)
Copyright (C) 2009 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Synoptic Model for Analyzing Animal Space Use
> # By: Jon Horne; jhorne@uidaho.edu
> 
> i <- 0
> cluster <- ""
> options <- commandArgs()
> for(option in options) {
+            i <- i + 1
+            if(option == "-i"){
+            cluster <- options[i + 1]
+            }
+ }
> 
> # read in files:
> #(1) set working directory with input files
> #workdir = choose.dir(caption="Select folder with input files")
> basedir = getwd()
> workdir = paste(getwd(),"/data/",cluster, sep="")
> setwd(workdir)
